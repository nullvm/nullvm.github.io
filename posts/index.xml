<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on nullvm</title>
    <link>/posts/</link>
    <description>Recent content in Posts on nullvm</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Aug 2025 13:33:34 +0700</lastBuildDate>
    <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How I Declared War on Windows Updates (and Won‚Ä¶ Kind of)</title>
      <link>/posts/windows-update-disable/</link>
      <pubDate>Wed, 27 Aug 2025 13:33:34 +0700</pubDate>
      <guid>/posts/windows-update-disable/</guid>
      <description>&lt;p&gt;Ever since I installed my first Linux distro (good old Ubuntu), I never once thought about going back to Windows. I mean, why would I? Before Linux, I only touched computers for gaming. Anything beyond that‚Äîwriting documents, checking emails, or wrestling with random &lt;strong&gt;Blue Screen of Death&lt;/strong&gt; encounters‚Äîsounded like the digital equivalent of watching paint dry.&lt;/p&gt;
&lt;p&gt;Linux changed everything. Suddenly, computers weren‚Äôt these boring office machines‚Äîthey were &lt;em&gt;fun&lt;/em&gt;. They were obedient little metal pets that did whatever I told them to. Want to customize your entire desktop? Sure. Want to write a bash script that does absolutely nothing useful but makes you feel like a hacker? Go for it. Want to nuke your bootloader at 2 AM and spend the next 4 hours fixing it? Linux says, &lt;em&gt;‚ÄúChallenge accepted.‚Äù&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>PicoCTF Writeup #475</title>
      <link>/posts/picoctf-hashcrack/</link>
      <pubDate>Tue, 26 Aug 2025 11:59:43 +0700</pubDate>
      <guid>/posts/picoctf-hashcrack/</guid>
      <description>&lt;p&gt;The &lt;strong&gt;&lt;code&gt;hashcrack&lt;/code&gt;&lt;/strong&gt; challenge from PicoCTF is a practical demonstration of the security risks posed by weak hashing algorithms for passwords. In this write-up, I will detail the steps taken to solve the challenge, the reasoning behind each decision, and the security lessons that can be learned from this exercise. You can try and solve it yourself &lt;a href=&#34;https://play.picoctf.org/practice/challenge/475&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;challenge-overview&#34;&gt;Challenge Overview&lt;/h2&gt;
&lt;p&gt;The challenge description states that a company‚Äôs server was breached because the administrator used weakly hashed passwords. Our goal is to gain access to the secret message stored on that server. To start, we are given the connection details:&lt;/p&gt;</description>
    </item>
    <item>
      <title>PicoCTF Writeup #482</title>
      <link>/posts/picoctf-writeup-482/</link>
      <pubDate>Wed, 20 Aug 2025 10:06:40 +0700</pubDate>
      <guid>/posts/picoctf-writeup-482/</guid>
      <description>&lt;h2 id=&#34;hacking-profile-pictures-like-its-2005-picoctf-web-exploit-writeup&#34;&gt;Hacking Profile Pictures Like It‚Äôs 2005 (picoCTF Web Exploit Writeup)&lt;/h2&gt;
&lt;p&gt;So, I tried another picoCTF challenge and this one was basically:&lt;/p&gt;
&lt;p&gt;üë®‚Äçüíª &lt;em&gt;‚ÄúA developer added profile picture uploads. What could possibly go wrong?‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you‚Äôve ever touched PHP (I‚Äôm sorry) you already know the answer: &lt;strong&gt;literally everything&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The challenge: &lt;a href=&#34;https://play.picoctf.org/practice/challenge/482&#34;&gt;Standard Pizzas&lt;/a&gt; üçï&lt;/p&gt;
&lt;h2 id=&#34;upload-feature-more-like-upload-malware&#34;&gt;Upload Feature? More Like Upload &lt;em&gt;Malware&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;The site lets you upload an image and then proudly tells you where it lives:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Access Import Anywhere in Python</title>
      <link>/posts/access-import-anywhere-python/</link>
      <pubDate>Tue, 19 Aug 2025 16:50:14 +0700</pubDate>
      <guid>/posts/access-import-anywhere-python/</guid>
      <description>&lt;h2 id=&#34;that-one-silly-python-feature-hackers-love-and-devs-hate-&#34;&gt;That One Silly Python Feature Hackers Love (and Devs Hate) üêçüíª&lt;/h2&gt;
&lt;p&gt;Python is an amazing language. It‚Äôs clean, elegant, and super beginner-friendly.&lt;/p&gt;
&lt;p&gt;‚Ä¶until you stumble across one of its cursed features and realize &lt;strong&gt;‚Äúoh no, this is how hackers get RCE.‚Äù&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today‚Äôs silly Python feature:
üëâ You can &lt;strong&gt;import literally anything, from anywhere.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;wait-i-can-do-that&#34;&gt;Wait‚Ä¶ I Can Do &lt;em&gt;That?&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Normally in Python, you import modules at the top like a responsible developer:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding Python‚Äôs Method Resolution Order (MRO) Without Losing Your Sanity</title>
      <link>/posts/mro-python/</link>
      <pubDate>Tue, 19 Aug 2025 16:30:43 +0700</pubDate>
      <guid>/posts/mro-python/</guid>
      <description>&lt;p&gt;Python loves inheritance. You can make classes inherit from other classes, those classes inherit from others, and suddenly you‚Äôve got a full-blown family tree that looks like someone spilled spaghetti on your UML diagram. And then you run into the question: &lt;em&gt;when I call a method, which ancestor actually answers the call?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;That‚Äôs where &lt;strong&gt;MRO (Method Resolution Order)&lt;/strong&gt; comes in. Think of it like &lt;code&gt;ls&lt;/code&gt; for Python‚Äôs class hierarchy‚Äîit shows you the exact path Python will take when looking for a method. No more guessing which &lt;code&gt;def speak()&lt;/code&gt; gets invoked when you‚Äôve got five grandparents fighting for attention.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gacha Game Terms for Lazy Players</title>
      <link>/posts/gacha-terms/</link>
      <pubDate>Tue, 19 Aug 2025 15:11:13 +0700</pubDate>
      <guid>/posts/gacha-terms/</guid>
      <description>&lt;p&gt;I‚Äôve never been into gacha games. My taste in gaming is simple: give me a good RPG or a visual novel and I‚Äôm set. Why? Because I‚Äôm a sucker for story. Graphics will keep evolving anyway ‚Äî that‚Äôs just Moore‚Äôs Law with prettier shaders. But story? That‚Äôs pure human creativity, the real kernel that makes the whole program worth running.&lt;/p&gt;
&lt;p&gt;But then one day, I stumbled onto this game called &lt;a href=&#34;https://zenless.hoyoverse.com/&#34;&gt;Zenless Zone Zero&lt;/a&gt;. The fandom wouldn‚Äôt stop posting memes about how it‚Äôs basically a gooner simulator. And yeah‚Ä¶ they weren‚Äôt wrong. I tried it. I‚Äôm playing it. Don‚Äôt @ me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PicoCTF Writeup #490</title>
      <link>/posts/picoctf-writeup-binary-exploit/</link>
      <pubDate>Tue, 19 Aug 2025 14:20:15 +0700</pubDate>
      <guid>/posts/picoctf-writeup-binary-exploit/</guid>
      <description>&lt;h2 id=&#34;binary-exploitation-challenge-pie--function-hijacking-in-picoctf&#34;&gt;Binary Exploitation Challenge (PIE &amp;amp; Function Hijacking in picoCTF)&lt;/h2&gt;
&lt;p&gt;I‚Äôve always been fascinated by low-level programming and security, but up until now I hadn‚Äôt really tried a &lt;strong&gt;binary exploitation challenge&lt;/strong&gt;. Recently, I stumbled upon &lt;a href=&#34;https://play.picoctf.org/practice/challenge/490&#34;&gt;this picoCTF challenge&lt;/a&gt; called &lt;em&gt;‚Äúrescue-float‚Äù&lt;/em&gt; ‚Äî and let me tell you, it was a mix of confusion, discovery, and a little bit of victory at the end.&lt;/p&gt;
&lt;p&gt;This post is a casual walkthrough of how I approached it as a beginner. If you‚Äôre into Linux, development, or cybersecurity, you‚Äôll probably find this fun (or at least relatable if you remember your first binary exploitation adventure).&lt;/p&gt;</description>
    </item>
    <item>
      <title>PicoCTF Writeup #505</title>
      <link>/posts/picoctf-writeup-disko-1/</link>
      <pubDate>Tue, 19 Aug 2025 11:27:28 +0700</pubDate>
      <guid>/posts/picoctf-writeup-disko-1/</guid>
      <description>&lt;h2 id=&#34;picoctf-writeup--forensics-disk-image&#34;&gt;PicoCTF Writeup ‚Äì Forensics Disk Image&lt;/h2&gt;
&lt;p&gt;Challenge: &lt;a href=&#34;https://play.picoctf.org/practice/challenge/505&#34;&gt;Disk, disk, sleuth!&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;
Can you find the flag in this disk image?
Download the disk image &lt;a href=&#34;https://artifacts.picoctf.net/c/536/disko-1.dd.gz&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;first-thoughts&#34;&gt;First Thoughts&lt;/h2&gt;
&lt;p&gt;This challenge was tagged &lt;strong&gt;forensics&lt;/strong&gt;, which usually means poking around filesystems, memory dumps, or raw disk images. The goal is to extract hidden information ‚Äî in this case, the flag.&lt;/p&gt;
&lt;p&gt;I grabbed the disk image (&lt;code&gt;disko-1.dd&lt;/code&gt;) and started experimenting.&lt;/p&gt;
&lt;h2 id=&#34;initial-attempts&#34;&gt;Initial Attempts&lt;/h2&gt;
&lt;p&gt;My first instinct was to take a look at the raw hex using &lt;code&gt;xxd&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>PicoCTF Writeup #492</title>
      <link>/posts/picoctf-writeup-ssti/</link>
      <pubDate>Tue, 19 Aug 2025 11:09:54 +0700</pubDate>
      <guid>/posts/picoctf-writeup-ssti/</guid>
      <description>&lt;h2 id=&#34;picoctf-writeup--server-side-template-injection-ssti&#34;&gt;PicoCTF Writeup ‚Äì Server-Side Template Injection (SSTI)&lt;/h2&gt;
&lt;p&gt;Recently, I played around with a PicoCTF &lt;a href=&#34;https://play.picoctf.org/practice/challenge/492&#34;&gt;challenge 492&lt;/a&gt;. The challenge looked like a simple web app that lets you &amp;ldquo;announce whatever you want.&amp;rdquo; Naturally, I fired up my terminal and started poking at it with &lt;code&gt;curl&lt;/code&gt;. By the way, we can also visit the website and experiment with the form instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -X GET http://rescued-float.picoctf.net:49878/announce -i
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Response:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HTTP/1.1 405 METHOD NOT ALLOWED
Allow: POST, OPTIONS
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Looks like only &lt;code&gt;POST&lt;/code&gt; is allowed, so I retried with:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vim Backup-Copy</title>
      <link>/posts/vim-backup-copy/</link>
      <pubDate>Thu, 12 Jun 2025 21:41:46 +0700</pubDate>
      <guid>/posts/vim-backup-copy/</guid>
      <description>&lt;p&gt;While writing a custom version of the &lt;code&gt;tail -f&lt;/code&gt; command in C, I stumbled upon an
interesting behavior in the Vim/Neovim text editors. The purpose of the program is
to continuously print any new data appended to the end of a file‚Äîjust like &lt;code&gt;tail -f&lt;/code&gt;,
which is commonly used for watching log files.&lt;/p&gt;
&lt;p&gt;In my implementation, I have something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;argv&lt;/span&gt;[&lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;filename&lt;/span&gt;, &lt;span style=&#34;color:#e06c75&#34;&gt;O_RDONLY&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#e06c75&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;open&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;open()&lt;/code&gt; function, provided by &lt;code&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/code&gt;, returns a file descriptor‚Äîa
small, nonnegative integer that acts as an index into the process‚Äôs table of
open file descriptors.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generate Ranged Random Integer in Javascript</title>
      <link>/posts/randint-js/</link>
      <pubDate>Sat, 26 Oct 2024 20:25:23 +0700</pubDate>
      <guid>/posts/randint-js/</guid>
      <description>&lt;p&gt;Here I will show you a simple way to generate a ranged random
integer number in javascript. Since javascript doesn&amp;rsquo;t have built in
function to generate ranged integer number, we will create one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;randInt&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;left&lt;/span&gt;, &lt;span style=&#34;color:#e06c75&#34;&gt;right&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c678dd&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;Math&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#e5c07b&#34;&gt;Math&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;random&lt;/span&gt;() &lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#e06c75&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#56b6c2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;left&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it, this is just me passing by and dropping some code snippets.&lt;/p&gt;
&lt;p&gt;See you later.&lt;/p&gt;
&lt;p&gt;Stay safe!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Merge Pdf in Linux using pdfunite</title>
      <link>/posts/merge-pdf-in-linux-pdfunite/</link>
      <pubDate>Thu, 24 Oct 2024 20:22:38 +0700</pubDate>
      <guid>/posts/merge-pdf-in-linux-pdfunite/</guid>
      <description>&lt;p&gt;Merging pdf files in Linux is really simple, you can use a
command line called &lt;code&gt;pdfunite&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Open a terminal and type the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pdfunite --help
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;in my system, it prints&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pdfunite version 24.06.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Copyright 2005-2024 The Poppler Developers - http://poppler.freedesktop.org
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Copyright 1996-2011, &lt;span style=&#34;color:#d19a66&#34;&gt;2022&lt;/span&gt; Glyph &amp;amp; Cog, LLC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage: pdfunite &lt;span style=&#34;color:#56b6c2&#34;&gt;[&lt;/span&gt;options&lt;span style=&#34;color:#56b6c2&#34;&gt;]&lt;/span&gt; &amp;lt;PDF-sourcefile-1&amp;gt;..&amp;lt;PDF-sourcefile-n&amp;gt; &amp;lt;PDF-destfile&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -v             : print copyright and version info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -h             : print usage information
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -help          : print usage information
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --help         : print usage information
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -?             : print usage information
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s say we want to merge three pdf files &lt;code&gt;head.pdf&lt;/code&gt;, &lt;code&gt;body.pdf&lt;/code&gt;, and &lt;code&gt;foot.pdf&lt;/code&gt; into
one file named &lt;code&gt;all.pdf&lt;/code&gt;. Using &lt;code&gt;pdfunite&lt;/code&gt; we can effortlessly merge all those pdf
files like so&lt;/p&gt;</description>
    </item>
    <item>
      <title>Replicating Right Click Behavior using Vanilla Javascript</title>
      <link>/posts/replicating-right-click-behavior-using-vanilla-javascript/</link>
      <pubDate>Thu, 24 Oct 2024 19:36:18 +0700</pubDate>
      <guid>/posts/replicating-right-click-behavior-using-vanilla-javascript/</guid>
      <description>&lt;p&gt;The idea is simple.&lt;/p&gt;
&lt;p&gt;First, disable the default event handler for right click in the browser.&lt;/p&gt;
&lt;p&gt;Second, create a custom event handler for right click event.&lt;/p&gt;
&lt;p&gt;Implementing the first idea, we can do something like the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;window&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;contextmenu&amp;#34;&lt;/span&gt;, (&lt;span style=&#34;color:#e06c75&#34;&gt;event&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e06c75&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;preventDefault&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;from here we can easily add any custom code for event handler
to our liking, here I will just log &amp;ldquo;Right Click detected!&amp;rdquo; into
the console.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;window&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;contextmenu&amp;#34;&lt;/span&gt;, (&lt;span style=&#34;color:#e06c75&#34;&gt;event&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e06c75&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;preventDefault&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e06c75&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Right Click detected!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can create additional html elements and put it into the window
to act as the replacement for the default context menu.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javascript Promise Simplified</title>
      <link>/posts/promise-simplified-js/</link>
      <pubDate>Mon, 21 Oct 2024 20:08:35 +0700</pubDate>
      <guid>/posts/promise-simplified-js/</guid>
      <description>&lt;p&gt;Promise has three different states: pending, resolve, and reject.&lt;/p&gt;
&lt;p&gt;When you first create a promise, it will be in pending state. This
promise can be either &amp;ldquo;fulfilled&amp;rdquo; thus it will be resolved or it can
be &amp;ldquo;rejected&amp;rdquo; thus it will be rejected.&lt;/p&gt;
&lt;p&gt;In other word, if promise resulted in success it resolve, else it reject.&lt;/p&gt;
&lt;p&gt;To create a promise in javascript is really simple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;myPromise&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c678dd&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;Promise&lt;/span&gt;(&lt;span style=&#34;color:#c678dd&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#e06c75&#34;&gt;resolve&lt;/span&gt;, &lt;span style=&#34;color:#e06c75&#34;&gt;reject&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#7f848e&#34;&gt;// do something
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What you do inside the promise will decide whether it will resolve or reject.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dummy File Watcher in C</title>
      <link>/posts/dummy-file-watcher-c/</link>
      <pubDate>Sat, 06 Jul 2024 18:59:44 +0700</pubDate>
      <guid>/posts/dummy-file-watcher-c/</guid>
      <description>&lt;p&gt;In this article we will build a dummy file watcher using C programming
language.&lt;/p&gt;
&lt;p&gt;We say dummy file watcher because to build a proper file watcher, we
need to utilize os internal features which is a bit more complex.&lt;/p&gt;
&lt;p&gt;Instead, we will create an infinite loop that checks a given directory
every 0.5 second and see if something has changed.&lt;/p&gt;
&lt;p&gt;First thing we need to do is to create a function that tells if something
has changed in a given directory.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Review of Pointer in C</title>
      <link>/posts/pointer-of-c-review/</link>
      <pubDate>Wed, 03 Jul 2024 15:07:47 +0700</pubDate>
      <guid>/posts/pointer-of-c-review/</guid>
      <description>&lt;p&gt;In this short article we will review pointers
in C programming language, if you are new to this
kind of topic please read the tutorial of pointers
for beginners first, try &lt;a href=&#34;https://www.geeksforgeeks.org/c-pointers/&#34;&gt;this tutorial&lt;/a&gt; for example.&lt;/p&gt;
&lt;h3 id=&#34;defining-pointer&#34;&gt;Defining Pointer&lt;/h3&gt;
&lt;p&gt;There are several ways to define a pointer in C.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt;; &lt;span style=&#34;color:#7f848e&#34;&gt;// p pointer to address x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;we can assign the address right away like so&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dereferencing-pointer&#34;&gt;Dereferencing Pointer&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;*&lt;/code&gt; to dereference a pointer, this will
return the value that the address of pointer is
pointing at holds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dynamic Array in C Simplified</title>
      <link>/posts/dynamic-array-in-c-simplified/</link>
      <pubDate>Tue, 02 Jul 2024 13:30:14 +0700</pubDate>
      <guid>/posts/dynamic-array-in-c-simplified/</guid>
      <description>&lt;p&gt;Array data structure is really useful, it can used to to store value
with same data types, we can access it really easy, updating the value
of array is also a trivial thing to do. One of the most important use
of array is that is it used to implement other more complex data structures
such as linked list, binary tree and hash tables.&lt;/p&gt;
&lt;p&gt;But what is greater than array? Yup, dynamic array.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Hard Link and Soft Link in a Nutshell</title>
      <link>/posts/hard-link-soft-link-in-a-nutshell-linux/</link>
      <pubDate>Mon, 24 Jun 2024 20:47:46 +0700</pubDate>
      <guid>/posts/hard-link-soft-link-in-a-nutshell-linux/</guid>
      <description>&lt;h2 id=&#34;definition&#34;&gt;Definition&lt;/h2&gt;
&lt;p&gt;Before we talk about hardlink and softlink in linux, we must
first know what is inode and filename, and what&amp;rsquo;s the difference
between the two.&lt;/p&gt;
&lt;h3 id=&#34;what-is-inode&#34;&gt;What is inode?&lt;/h3&gt;
&lt;p&gt;Your computer needs a way to &amp;rsquo;labelize&amp;rsquo; files in its filesystem.
Remember, &lt;a href=&#34;https://en.wikipedia.org/wiki/Everything_is_a_file&#34;&gt;everything is a file&lt;/a&gt; in linux.
One way to do this is to put a unique integer value to the file.
This unique integer value is what we called the &lt;em&gt;inode number&lt;/em&gt;, which
is a number that&amp;rsquo;s used to identify an &lt;em&gt;inode&lt;/em&gt;. The &lt;a href=&#34;https://en.wikipedia.org/wiki/Inode&#34;&gt;inode&lt;/a&gt; is a data structure
that describe a file-system object.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pointer and Const in C&#43;&#43;</title>
      <link>/posts/cpp-pointer-const/</link>
      <pubDate>Sat, 15 Jun 2024 20:59:34 +0700</pubDate>
      <guid>/posts/cpp-pointer-const/</guid>
      <description>&lt;p&gt;The following paragraphs are the summary of pointer
and const in C++, I always forget about this topic
so I decided to create a post about it.&lt;/p&gt;
&lt;h2 id=&#34;regular-pointers&#34;&gt;Regular Pointers&lt;/h2&gt;
&lt;p&gt;Regular pointers are pointers the we usually use when
working with pointers in C++.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt;; &lt;span style=&#34;color:#7f848e&#34;&gt;// regular pointer to x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;6&lt;/span&gt;; &lt;span style=&#34;color:#7f848e&#34;&gt;// *ptr would be 6
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#7f848e&#34;&gt;// we can change the value at the address being held
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#7f848e&#34;&gt;// x and *ptr would be 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;88&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e06c75&#34;&gt;ptr&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;y&lt;/span&gt;; &lt;span style=&#34;color:#7f848e&#34;&gt;// changing the address that ptr is pointing at
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c678dd&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pointer-to-a-const-value&#34;&gt;Pointer to a const value&lt;/h2&gt;
&lt;p&gt;I won&amp;rsquo;t explain what is it and the rest of the it since it
is easier to explain it using code rather than using words.
(The definitions are still confusing to meüíÄ)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
