<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Programming on nullvm</title>
    <link>/en/tags/programming/index.xml</link>
    <description>Recent content in Programming on nullvm</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Wed, 05 Feb 2025 18:42:50 +0700</lastBuildDate>
    <atom:link href="/en/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OverTheWire Bandit 5</title>
      <link>/en/posts/bandit-overthewire-5/</link>
      <pubDate>Wed, 05 Feb 2025 18:42:50 +0700</pubDate>
      <guid>/en/posts/bandit-overthewire-5/</guid>
      <description>&lt;p&gt;This is level 4 -&amp;gt; level 5 of bandit wargame from overthewire.&lt;/p&gt;
&lt;p&gt;Password stored in a file somewhere on the server. Here is the goal
level.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The password for the next level is stored in the only human-readable
file in the &lt;strong&gt;inhere&lt;/strong&gt; directory. Tip: if your terminal is messed up,
try the “reset” command.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So logged in to the game server. Change directory to &lt;strong&gt;inhere&lt;/strong&gt;.
You will find a lot of files with similar names that has increasing number
at the end of its name.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OverTheWire Bandit 4</title>
      <link>/en/posts/bandit-overthewire-4/</link>
      <pubDate>Wed, 05 Feb 2025 18:33:27 +0700</pubDate>
      <guid>/en/posts/bandit-overthewire-4/</guid>
      <description>&lt;p&gt;Continuing with level 3 -&amp;gt; level 4. The password is
stored in a file, somewhere on the server.&lt;/p&gt;
&lt;p&gt;Here is the level goal.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The password for the next level is stored in a hidden file in the &lt;strong&gt;inhere&lt;/strong&gt; directory.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Hidden file is a file named beginning with dot. It won&amp;rsquo;t be displayed using
&lt;code&gt;ls&lt;/code&gt; command. You need to add &lt;code&gt;-a&lt;/code&gt; flag to display hidden file. Naming directory
beginning with dot will also makes it hidden.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OverTheWire Bandit 3</title>
      <link>/en/posts/bandit-overthewire-3/</link>
      <pubDate>Tue, 04 Feb 2025 19:04:51 +0700</pubDate>
      <guid>/en/posts/bandit-overthewire-3/</guid>
      <description>&lt;p&gt;This is level 2 -&amp;gt; level 3 in the bandit wargame from &lt;a href=&#34;https://overthewire.org&#34;&gt;overthewire.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not so much different from the &lt;a href=&#34;/en/posts/bandit-overthewire-2/&#34;&gt;previous level&lt;/a&gt;, the
password for the next level is stored inside a file.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see the level goal:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The password for the next level is stored in a file called &lt;strong&gt;spaces in this filename&lt;/strong&gt; located in the home directory&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You notice that the filename contains space, so to view the content of
the file we need to surround it with double quote or single quote, or we
can escape the space character using backslash.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CTF Hacker101 Flag 1 - A Little Something to Get You Started</title>
      <link>/en/posts/ctf-hacker101-1/</link>
      <pubDate>Fri, 31 Jan 2025 18:16:37 +0700</pubDate>
      <guid>/en/posts/ctf-hacker101-1/</guid>
      <description>&lt;p&gt;Another challange I do while learning programming, this is episode 1 by the way.&lt;/p&gt;
&lt;p&gt;You can visit &lt;a href=&#34;https://ctf.hacker101.com/&#34;&gt;hacker101&lt;/a&gt; if you want to play it too.&lt;/p&gt;
&lt;p&gt;I start the level and it redirected me to a website with white background
and a paragraph which said:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Welcome to level 0. Enjoy your stay.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nothing out of ordinary here. So, I inspect the page and look at the source
code. Seems normal. Until I take a look at the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag and saw the
following lines:&lt;/p&gt;</description>
    </item>
    <item>
      <title>OverTheWire Bandit 2</title>
      <link>/en/posts/bandit-overthewire-2/</link>
      <pubDate>Fri, 31 Jan 2025 18:03:42 +0700</pubDate>
      <guid>/en/posts/bandit-overthewire-2/</guid>
      <description>&lt;p&gt;Continue to Level 2. Here is the level goal:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The password for the next level is stored in a file called - located in the home directory&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I connected to the game server using the password from the previous level.
The file needed to get the password for the next level is located at the
home directory, so I just typed in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat ./-
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the content get printed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OverTheWire Bandit 1</title>
      <link>/en/posts/bandit-overthewire-1/</link>
      <pubDate>Thu, 30 Jan 2025 19:23:27 +0700</pubDate>
      <guid>/en/posts/bandit-overthewire-1/</guid>
      <description>&lt;p&gt;After getting the password from Level 0, I connected to Level 1.&lt;/p&gt;
&lt;p&gt;Here is the level goal by the way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This one is pretty straightforward.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OverTheWire Bandit 0</title>
      <link>/en/posts/bandit-overthewire-0/</link>
      <pubDate>Wed, 29 Jan 2025 17:29:28 +0700</pubDate>
      <guid>/en/posts/bandit-overthewire-0/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m currently doing Bandit wargames in &lt;a href=&#34;https://overthewire.org/&#34;&gt;overthewire&lt;/a&gt; website,
while doing so I want to share my journey here.&lt;/p&gt;
&lt;p&gt;First level, it&amp;rsquo;s Level 0. The goal is to connect to the game server using
ssh. This one is pretty straightforward, the only obstacle here is knowing
how to use ssh.&lt;/p&gt;
&lt;p&gt;Since I&amp;rsquo;m in a linux machine, I can easily read the manpage for &lt;code&gt;ssh&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;The instruction for Level 0 is the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generate Ranged Random Integer in Javascript</title>
      <link>/en/posts/randint-js/</link>
      <pubDate>Sat, 26 Oct 2024 20:25:23 +0700</pubDate>
      <guid>/en/posts/randint-js/</guid>
      <description>&lt;p&gt;Here I will show you a simple way to generate a ranged random
integer number in javascript. Since javascript doesn&amp;rsquo;t have built in
function to generate ranged integer number, we will create one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;randInt&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;left&lt;/span&gt;, &lt;span style=&#34;color:#e06c75&#34;&gt;right&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c678dd&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;Math&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;floor&lt;/span&gt;(&lt;span style=&#34;color:#e5c07b&#34;&gt;Math&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;random&lt;/span&gt;() &lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#e06c75&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#56b6c2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;left&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it, this is just me passing by and dropping some code snippets.&lt;/p&gt;
&lt;p&gt;See you later.&lt;/p&gt;
&lt;p&gt;Stay safe!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Replicating Right Click Behavior using Vanilla Javascript</title>
      <link>/en/posts/replicating-right-click-behavior-using-vanilla-javascript/</link>
      <pubDate>Thu, 24 Oct 2024 19:36:18 +0700</pubDate>
      <guid>/en/posts/replicating-right-click-behavior-using-vanilla-javascript/</guid>
      <description>&lt;p&gt;The idea is simple.&lt;/p&gt;
&lt;p&gt;First, disable the default event handler for right click in the browser.&lt;/p&gt;
&lt;p&gt;Second, create a custom event handler for right click event.&lt;/p&gt;
&lt;p&gt;Implementing the first idea, we can do something like the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;window&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;contextmenu&amp;#34;&lt;/span&gt;, (&lt;span style=&#34;color:#e06c75&#34;&gt;event&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e06c75&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;preventDefault&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;from here we can easily add any custom code for event handler
to our liking, here I will just log &amp;ldquo;Right Click detected!&amp;rdquo; into
the console.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;window&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;contextmenu&amp;#34;&lt;/span&gt;, (&lt;span style=&#34;color:#e06c75&#34;&gt;event&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e06c75&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;preventDefault&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e06c75&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Right Click detected!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can create additional html elements and put it into the window
to act as the replacement for the default context menu.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javascript Promise Simplified</title>
      <link>/en/posts/promise-simplified-js/</link>
      <pubDate>Mon, 21 Oct 2024 20:08:35 +0700</pubDate>
      <guid>/en/posts/promise-simplified-js/</guid>
      <description>&lt;p&gt;Promise has three different states: pending, resolve, and reject.&lt;/p&gt;
&lt;p&gt;When you first create a promise, it will be in pending state. This
promise can be either &amp;ldquo;fulfilled&amp;rdquo; thus it will be resolved or it can
be &amp;ldquo;rejected&amp;rdquo; thus it will be rejected.&lt;/p&gt;
&lt;p&gt;In other word, if promise resulted in success it resolve, else it reject.&lt;/p&gt;
&lt;p&gt;To create a promise in javascript is really simple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;myPromise&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c678dd&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;Promise&lt;/span&gt;(&lt;span style=&#34;color:#c678dd&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#e06c75&#34;&gt;resolve&lt;/span&gt;, &lt;span style=&#34;color:#e06c75&#34;&gt;reject&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#7f848e&#34;&gt;// do something
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What you do inside the promise will decide whether it will resolve or reject.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dummy File Watcher in C</title>
      <link>/en/posts/dummy-file-watcher-c/</link>
      <pubDate>Sat, 06 Jul 2024 18:59:44 +0700</pubDate>
      <guid>/en/posts/dummy-file-watcher-c/</guid>
      <description>&lt;p&gt;In this article we will build a dummy file watcher using C programming
language.&lt;/p&gt;
&lt;p&gt;We say dummy file watcher because to build a proper file watcher, we
need to utilize os internal features which is a bit more complex.&lt;/p&gt;
&lt;p&gt;Instead, we will create an infinite loop that checks a given directory
every 0.5 second and see if something has changed.&lt;/p&gt;
&lt;p&gt;First thing we need to do is to create a function that tells if something
has changed in a given directory.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Review of Pointer in C</title>
      <link>/en/posts/pointer-of-c-review/</link>
      <pubDate>Wed, 03 Jul 2024 15:07:47 +0700</pubDate>
      <guid>/en/posts/pointer-of-c-review/</guid>
      <description>&lt;p&gt;In this short article we will review pointers
in C programming language, if you are new to this
kind of topic please read the tutorial of pointers
for beginners first, try &lt;a href=&#34;https://www.geeksforgeeks.org/c-pointers/&#34;&gt;this tutorial&lt;/a&gt; for example.&lt;/p&gt;
&lt;h3 id=&#34;defining-pointer&#34;&gt;Defining Pointer&lt;/h3&gt;
&lt;p&gt;There are several ways to define a pointer in C.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt;; &lt;span style=&#34;color:#7f848e&#34;&gt;// p pointer to address x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;we can assign the address right away like so&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dereferencing-pointer&#34;&gt;Dereferencing Pointer&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;*&lt;/code&gt; to dereference a pointer, this will
return the value that the address of pointer is
pointing at holds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dynamic Array in C Simplified</title>
      <link>/en/posts/dynamic-array-in-c-simplified/</link>
      <pubDate>Tue, 02 Jul 2024 13:30:14 +0700</pubDate>
      <guid>/en/posts/dynamic-array-in-c-simplified/</guid>
      <description>&lt;p&gt;Array data structure is really useful, it can used to to store value
with same data types, we can access it really easy, updating the value
of array is also a trivial thing to do. One of the most important use
of array is that is it used to implement other more complex data structures
such as linked list, binary tree and hash tables.&lt;/p&gt;
&lt;p&gt;But what is greater that array? Yup, dynamic array.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Keep Writing Code Until It Becomes Meaningless</title>
      <link>/en/posts/start-coding-small/</link>
      <pubDate>Mon, 24 Jun 2024 20:23:33 +0700</pubDate>
      <guid>/en/posts/start-coding-small/</guid>
      <description>&lt;p&gt;If you are learning programming or computer science related stuff,
chances are you will write some code. Coding and programming are two
different things, in a nutshell, programming is applying some logic
while coding is actually typing the applied logic into machine-readable
instruction, read &lt;a href=&#34;https://www.freecodecamp.org/news/difference-between-coding-and-programming/&#34;&gt;this awesome article&lt;/a&gt;
from freeCodeCamp.&lt;/p&gt;
&lt;p&gt;You can do programming wherever you are, you don&amp;rsquo;t have to sit in
front of your computer since applying some logic don&amp;rsquo;t necessarily
need a computer.Think about how you study math, that&amp;rsquo;s how you study
programming, more or less.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Documenting Programming Journey with Web Development</title>
      <link>/en/posts/documenting-programming-journey-with-web-development/</link>
      <pubDate>Wed, 19 Jun 2024 13:01:22 +0700</pubDate>
      <guid>/en/posts/documenting-programming-journey-with-web-development/</guid>
      <description>&lt;p&gt;Learning is a tiresome activity, you need to put a lot of effort and time when learning something,
this is even true when learning something by yourself, like programming, since nobody is going to
remind you when to study, when to review your note, when to exercise, what to study after you
finished the current topic, in other word, you need to put extra effort because nobody is going
to guide you whatsoever. Which is why keeping record of your learning journey is very important
so you can know how far have you progressed, how far are you from your goals, what need to be
evaluated from your previous experience and so forth.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
