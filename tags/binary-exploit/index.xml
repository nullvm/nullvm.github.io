<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Binary Exploit on nullvm</title>
    <link>/tags/binary-exploit/index.xml</link>
    <description>Recent content in Binary Exploit on nullvm</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Aug 2025 14:20:15 +0700</lastBuildDate>
    <atom:link href="/tags/binary-exploit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PicoCTF Writeup #490</title>
      <link>/posts/picoctf-writeup-binary-exploit/</link>
      <pubDate>Tue, 19 Aug 2025 14:20:15 +0700</pubDate>
      <guid>/posts/picoctf-writeup-binary-exploit/</guid>
      <description>&lt;h2 id=&#34;binary-exploitation-challenge-pie--function-hijacking-in-picoctf&#34;&gt;Binary Exploitation Challenge (PIE &amp;amp; Function Hijacking in picoCTF)&lt;/h2&gt;
&lt;p&gt;I’ve always been fascinated by low-level programming and security, but up until now I hadn’t really tried a &lt;strong&gt;binary exploitation challenge&lt;/strong&gt;. Recently, I stumbled upon &lt;a href=&#34;https://play.picoctf.org/practice/challenge/490&#34;&gt;this picoCTF challenge&lt;/a&gt; called &lt;em&gt;“rescue-float”&lt;/em&gt; — and let me tell you, it was a mix of confusion, discovery, and a little bit of victory at the end.&lt;/p&gt;
&lt;p&gt;This post is a casual walkthrough of how I approached it as a beginner. If you’re into Linux, development, or cybersecurity, you’ll probably find this fun (or at least relatable if you remember your first binary exploitation adventure).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
