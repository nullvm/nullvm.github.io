<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on nullvm</title>
    <link>/tags/python/index.xml</link>
    <description>Recent content in Python on nullvm</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Aug 2025 16:50:14 +0700</lastBuildDate>
    <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Access Import Anywhere in Python</title>
      <link>/posts/access-import-anywhere-python/</link>
      <pubDate>Tue, 19 Aug 2025 16:50:14 +0700</pubDate>
      <guid>/posts/access-import-anywhere-python/</guid>
      <description>&lt;h2 id=&#34;that-one-silly-python-feature-hackers-love-and-devs-hate-&#34;&gt;That One Silly Python Feature Hackers Love (and Devs Hate) üêçüíª&lt;/h2&gt;
&lt;p&gt;Python is an amazing language. It‚Äôs clean, elegant, and super beginner-friendly.&lt;/p&gt;
&lt;p&gt;‚Ä¶until you stumble across one of its cursed features and realize &lt;strong&gt;‚Äúoh no, this is how hackers get RCE.‚Äù&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today‚Äôs silly Python feature:
üëâ You can &lt;strong&gt;import literally anything, from anywhere.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;wait-i-can-do-that&#34;&gt;Wait‚Ä¶ I Can Do &lt;em&gt;That?&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Normally in Python, you import modules at the top like a responsible developer:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding Python‚Äôs Method Resolution Order (MRO) Without Losing Your Sanity</title>
      <link>/posts/mro-python/</link>
      <pubDate>Tue, 19 Aug 2025 16:30:43 +0700</pubDate>
      <guid>/posts/mro-python/</guid>
      <description>&lt;p&gt;Python loves inheritance. You can make classes inherit from other classes, those classes inherit from others, and suddenly you‚Äôve got a full-blown family tree that looks like someone spilled spaghetti on your UML diagram. And then you run into the question: &lt;em&gt;when I call a method, which ancestor actually answers the call?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;That‚Äôs where &lt;strong&gt;MRO (Method Resolution Order)&lt;/strong&gt; comes in. Think of it like &lt;code&gt;ls&lt;/code&gt; for Python‚Äôs class hierarchy‚Äîit shows you the exact path Python will take when looking for a method. No more guessing which &lt;code&gt;def speak()&lt;/code&gt; gets invoked when you‚Äôve got five grandparents fighting for attention.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
