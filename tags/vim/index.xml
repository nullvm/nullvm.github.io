<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Vim on nullvm</title>
    <link>/tags/vim/index.xml</link>
    <description>Recent content in Vim on nullvm</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Jun 2025 21:41:46 +0700</lastBuildDate>
    <atom:link href="/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vim Backup-Copy</title>
      <link>/posts/vim-backup-copy/</link>
      <pubDate>Thu, 12 Jun 2025 21:41:46 +0700</pubDate>
      <guid>/posts/vim-backup-copy/</guid>
      <description>&lt;p&gt;While writing a custom version of the &lt;code&gt;tail -f&lt;/code&gt; command in C, I stumbled upon an
interesting behavior in the Vim/Neovim text editors. The purpose of the program is
to continuously print any new data appended to the end of a file—just like &lt;code&gt;tail -f&lt;/code&gt;,
which is commonly used for watching log files.&lt;/p&gt;
&lt;p&gt;In my implementation, I have something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;argv&lt;/span&gt;[&lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;filename&lt;/span&gt;, &lt;span style=&#34;color:#e06c75&#34;&gt;O_RDONLY&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#e06c75&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;perror&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;open&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;open()&lt;/code&gt; function, provided by &lt;code&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/code&gt;, returns a file descriptor—a
small, nonnegative integer that acts as an index into the process’s table of
open file descriptors.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
