<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C on nullvm</title>
    <link>/tags/c/index.xml</link>
    <description>Recent content in C on nullvm</description>
    <generator>Hugo -- 0.148.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Jul 2024 18:59:44 +0700</lastBuildDate>
    <atom:link href="/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dummy File Watcher in C</title>
      <link>/posts/dummy-file-watcher-c/</link>
      <pubDate>Sat, 06 Jul 2024 18:59:44 +0700</pubDate>
      <guid>/posts/dummy-file-watcher-c/</guid>
      <description>&lt;p&gt;In this article we will build a dummy file watcher using C programming
language.&lt;/p&gt;
&lt;p&gt;We say dummy file watcher because to build a proper file watcher, we
need to utilize os internal features which is a bit more complex.&lt;/p&gt;
&lt;p&gt;Instead, we will create an infinite loop that checks a given directory
every 0.5 second and see if something has changed.&lt;/p&gt;
&lt;p&gt;First thing we need to do is to create a function that tells if something
has changed in a given directory.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Review of Pointer in C</title>
      <link>/posts/pointer-of-c-review/</link>
      <pubDate>Wed, 03 Jul 2024 15:07:47 +0700</pubDate>
      <guid>/posts/pointer-of-c-review/</guid>
      <description>&lt;p&gt;In this short article we will review pointers
in C programming language, if you are new to this
kind of topic please read the tutorial of pointers
for beginners first, try &lt;a href=&#34;https://www.geeksforgeeks.org/c-pointers/&#34;&gt;this tutorial&lt;/a&gt; for example.&lt;/p&gt;
&lt;h3 id=&#34;defining-pointer&#34;&gt;Defining Pointer&lt;/h3&gt;
&lt;p&gt;There are several ways to define a pointer in C.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt;; &lt;span style=&#34;color:#7f848e&#34;&gt;// p pointer to address x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;we can assign the address right away like so&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;x&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dereferencing-pointer&#34;&gt;Dereferencing Pointer&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;*&lt;/code&gt; to dereference a pointer, this will
return the value that the address of pointer is
pointing at holds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dynamic Array in C Simplified</title>
      <link>/posts/dynamic-array-in-c-simplified/</link>
      <pubDate>Tue, 02 Jul 2024 13:30:14 +0700</pubDate>
      <guid>/posts/dynamic-array-in-c-simplified/</guid>
      <description>&lt;p&gt;Array data structure is really useful, it can used to to store value
with same data types, we can access it really easy, updating the value
of array is also a trivial thing to do. One of the most important use
of array is that is it used to implement other more complex data structures
such as linked list, binary tree and hash tables.&lt;/p&gt;
&lt;p&gt;But what is greater than array? Yup, dynamic array.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
